// Next.js Project Code Export
// Generated on: Thu Nov 28 07:25:16 AM UTC 2024
// Project: .

// Package.json Information:
// ======================
{
  "name": "buzzplay",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "export": "next export",
    "start": "next start",
    "lint": "next lint --dir src",
    "security-check": "npm audit",
    "analyze": "ANALYZE=true next build"
  },
  "dependencies": {
    "@firebasegen/default-connector": "file:dataconnect-generated/js/default-connector",
    "@fortawesome/free-brands-svg-icons": "^6.6.0",
    "@fortawesome/free-regular-svg-icons": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@upstash/redis": "^1.34.3",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "^1.0.3",
    "date-fns": "^3.3.1",
    "embla-carousel-react": "^8.3.1",
    "firebase": "^10.14.1",
    "firebase-admin": "^12.7.0",
    "form-data": "^4.0.1",
    "framer-motion": "^11.11.11",
    "gsap": "^3.12.5",
    "helmet": "^7.1.0",
    "input-otp": "^1.4.0",
    "isomorphic-dompurify": "^1.13.0",
    "jest": "^29.7.0",
    "lucide-react": "^0.358.0",
    "mailgun-js": "^0.22.0",
    "mailgun.js": "^10.2.3",
    "next": "^15.0.2",
    "next-auth": "^4.24.7",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-day-picker": "^9.2.1",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.1",
    "react-resizable-panels": "^2.1.6",
    "recharts": "^2.13.3",
    "resend": "^4.0.1",
    "sanitize-html": "^2.13.1",
    "sonner": "^1.6.1",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@babel/plugin-proposal-private-methods": "^7.18.6",
    "@babel/preset-env": "^7.24.0",
    "@types/jest": "^29.5.14",
    "@types/json-schema": "^7.0.15",
    "@types/node": "^20.11.25",
    "@types/react": "^18.2.64",
    "@types/react-dom": "^18.2.21",
    "autoprefixer": "^10.4.18",
    "babel-loader": "^9.1.3",
    "eslint": "^8.57.0",
    "eslint-config-next": "13.5.6",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.4.2"
  }
}



================================================================================
// File: database.rules.json
================================================================================

{
  /* Visit https://firebase.google.com/docs/database/security to learn more about security rules. */
  "rules": {
    ".read": false,
    ".write": false
  }
}


================================================================================
// File: middleware.ts
================================================================================

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const response = NextResponse.next();

  // Add security headers
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('X-Frame-Options', 'DENY');
  
  // Rate limiting could be implemented here
  
  return response;
}

export const config = {
  matcher: [
    '/api/:path*',
    '/dashboard/:path*',
    '/admin/:path*',
  ],
};


================================================================================
// File: dataconnect-generated/js/default-connector/index.cjs.js
================================================================================

const { getDataConnect, validateArgs } = require('firebase/data-connect');

const connectorConfig = {
  connector: 'default',
  service: 'Buzzplay',
  location: 'us-central1'
};
exports.connectorConfig = connectorConfig;




================================================================================
// File: dataconnect-generated/js/default-connector/package.json
================================================================================

{
  "name": "@firebasegen/default-connector",
  "version": "1.0.0",
  "author": "Firebase <firebase-support@google.com> (https://firebase.google.com/)",
  "description": "Generated SDK For default",
  "license": "Apache-2.0",
  "engines": {
    "node": " >=18.0"
  },
  "typings": "index.d.ts",
  "module": "esm/index.esm.js",
  "main": "index.cjs.js",
  "browser": "esm/index.esm.js",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "require": "./index.cjs.js",
      "default": "./esm/index.esm.js"
    },
    "./package.json": "./package.json"
  },
  "peerDependencies": {
    "firebase": "^10.14.0"
  }
}


================================================================================
// File: dataconnect-generated/js/default-connector/esm/index.esm.js
================================================================================

import { getDataConnect, validateArgs } from 'firebase/data-connect';

export const connectorConfig = {
  connector: 'default',
  service: 'Buzzplay',
  location: 'us-central1'
};




================================================================================
// File: dataconnect-generated/js/default-connector/esm/package.json
================================================================================

{"type":"module"}


================================================================================
// File: dataconnect-generated/js/default-connector/index.d.ts
================================================================================

import { ConnectorConfig, DataConnect } from 'firebase/data-connect';
export const connectorConfig: ConnectorConfig;

export type TimestampString = string;

export type UUIDString = string;

export type Int64String = string;

export type DateString = string;








================================================================================
// File: tsconfig.json
================================================================================

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================================
// File: components.json
================================================================================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}



================================================================================
// File: firestore.indexes.json
================================================================================

{
  "indexes": [],
  "fieldOverrides": []
}



================================================================================
// File: next-env.d.ts
================================================================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.



================================================================================
// File: tailwind.config.ts
================================================================================

import type { Config } from 'tailwindcss';

const config: Config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        cyan:"#00dca7",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        backgroundImage: {
          'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
          'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',},
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#00FF88",
          foreground: "#000000",
        },
        secondary: {
          DEFAULT: "#FFD700",
          foreground: "#000000",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      boxShadow: {
        'button': '-7px -7px 20px 0px rgba(255,255,255,0.6), -4px -4px 5px 0px rgba(255,255,255,0.6), 7px 7px 20px 0px rgba(0,0,0,0.1), 4px 4px 5px 0px rgba(0,0,0,0.05)',
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;


================================================================================
// File: app/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";

import { Play, Film, Tv2, MessageCircle } from "lucide-react";
import Link from "next/link";

import { AnimatedGradientText } from "@/components/AnimatedGradientText";
import { AnimatedButton } from "@/components/ui/animated-button";
import { StarryBackground } from '@/components/StarryBackground';

const TMDB_API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY;
const TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/original";

function useMovieBackgrounds() {
  const [currentBackground, setCurrentBackground] = useState<string>("");
  const [isLoading, setIsLoading] = useState(true);

  const fetchMoviePosters = async () => {
    try {
      const response = await fetch(
        `https://api.themoviedb.org/3/movie/now_playing?api_key=${TMDB_API_KEY}&language=en-US&page=1`
      );
      const data = await response.json();
      const movies = data.results.filter((movie: any) => movie.backdrop_path);
      const randomMovie = movies[Math.floor(Math.random() * movies.length)];
      return `${TMDB_IMAGE_BASE_URL}${randomMovie.backdrop_path}`;
    } catch (error) {
      console.error("Error fetching movie posters:", error);
      return null;
    }
  };

  useEffect(() => {
    const updateBackground = async () => {
      const newBackground = await fetchMoviePosters();
      if (newBackground) {
        setCurrentBackground(newBackground);
        setIsLoading(false);
      }
    };

    updateBackground();
    const interval = setInterval(updateBackground, 10000);
    return () => clearInterval(interval);
  }, []);

  return { currentBackground, isLoading };
}

export default function Home() {
  const { currentBackground, isLoading } = useMovieBackgrounds();

  return (
    <main className="flex min-h-screen flex-col">
      {/* Hero Section - Full Viewport Height */}
      <div className="relative flex flex-1 flex-col items-center justify-center text-center px-4 min-h-screen -mt-16">
        {/* Movie Background */}
        <AnimatePresence mode="wait">
          {!isLoading && (
            <motion.div
              key={currentBackground}
              initial={{ opacity: 0 }}
              animate={{ opacity: 0.3 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 1 }}
              className="absolute inset-0"
              style={{
                backgroundImage: `url(${currentBackground})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                backgroundColor: 'black',
              }}
            />
          )}
        </AnimatePresence>

        {/* Glassmorphism Container */}
        <div className="relative max-w-4xl mx-auto p-8 rounded-xl backdrop-blur-md bg-white/10 dark:bg-black/10 border border-white/20 dark:border-white/10 shadow-xl mt-16">
          <h1 className="text-4xl font-bold tracking-tight sm:text-6xl md:text-7xl lg:text-8xl">
            <span className="text-black dark:text-white">Your Entertainment,</span>
            <div className="mt-2 sm:mt-2 md:mt-5">
              <span className="neon font-bold font-baeno">
                UNLEASHED
              </span>
            </div>
          </h1>
          
          <p className="mt-4 text-lg text-white">
            Stream unlimited movies, TV shows, and more. Start watching today
            with BuzzPlay.
          </p>

          <div className="mt-8 flex flex-wrap justify-center gap-4">
            <AnimatedButton asChild size="lg" className="animated-btn bg-emerald-500 hover:bg-emerald-600">
              <Link href="/register">Get Started</Link>
            </AnimatedButton>
            <Button asChild size="lg" variant="outline">
              <Link href="/pricing">View Plans</Link>
            </Button>
            <Button asChild size="lg" variant="outline">
              <Link 
                href="https://t.me/buzzplaymv" 
                target="_blank" 
                rel="noopener noreferrer"
              >
                Contact Us
              </Link>
            </Button>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="relative z-10 py-24">
        <StarryBackground />
        <div className="container relative z-10 px-4 md:px-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Stream on Any Device */}
            <div className="group relative overflow-hidden rounded-xl backdrop-blur-md bg-black/30 border border-white/10 p-8 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 hover:bg-white/10">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/10 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
              <div className="relative z-10">
                <Play className="w-12 h-12 mb-4 text-emerald-500 group-hover:scale-110 transition-transform" />
                <h3 className="text-xl font-semibold mb-2 text-white">Stream on Any Device</h3>
                <p className="text-gray-400 group-hover:text-gray-300 transition-colors">
                  BuzzPlay makes it easy to watch on almost any device—whether you&apos;re on iOS, macOS, Android, or using a web browser. Stream seamlessly on your favorite device, anytime, anywhere.
                </p>
              </div>
            </div>

            {/* Explore Our Library */}
            <div className="group relative overflow-hidden rounded-xl backdrop-blur-md bg-black/30 border border-white/10 p-8 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 hover:bg-white/10">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/10 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
              <div className="relative z-10">
                <Film className="w-12 h-12 mb-4 text-emerald-500 group-hover:scale-110 transition-transform" />
                <h3 className="text-xl font-semibold mb-2 text-white">Explore Our Expansive Library</h3>
                <p className="text-gray-400 group-hover:text-gray-300 transition-colors">
                  Dive into a vast collection of movies and TV shows, all in one place. Our intuitive, sleek interface makes browsing a breeze, so you can effortlessly discover what&apos;s next to watch with ease.
                </p>
              </div>
            </div>

            {/* Contact Us */}
            <div className="group relative overflow-hidden rounded-xl backdrop-blur-md bg-black/30 border border-white/10 p-8 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 hover:bg-white/10">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/10 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
              <div className="relative z-10">
                <MessageCircle className="w-12 h-12 mb-4 text-emerald-500 group-hover:scale-110 transition-transform" />
                <h3 className="text-xl font-semibold mb-2 text-white">We&apos;d Love to Hear From You</h3>
                <p className="text-gray-400 group-hover:text-gray-300 transition-colors">
                  Have special requests or content recommendations? We&apos;re all ears! Feel free to reach out to us, and let&apos;s make BuzzPlay your ultimate streaming experience.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}


================================================================================
// File: app/dashboard/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { useAuthContext } from "@/components/auth-provider";
import { doc, getDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, Settings, CreditCard, Copy } from "lucide-react";
import Link from "next/link";
import { DashboardHeader } from "@/components/dashboard-header";
import { SubscriptionStatus } from "@/components/subscription-status";
import { EmberBackground } from "@/components/EmberBackground";
import { AnimatedButton } from "@/components/ui/animated-button";
import { toast } from "@/hooks/use-toast";
import Image from "next/image";

interface UserData {
  subscriptionStatus: string;
  subscriptionEnd: string | null;
  plan?: string;
  duration?: number;
  embyUserId?: string;
  email?: string;
  deviceLimit?: number;
}

export default function DashboardPage() {
  const { user, loading: authLoading } = useAuthContext();
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (authLoading) return;
    
    const fetchUserData = async () => {
      if (!user) return;

      try {
        const userDoc = await getDoc(doc(db, "users", user.uid));
        if (userDoc.exists()) {
          setUserData(userDoc.data() as UserData);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [user, authLoading]);

  if (loading || authLoading) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-3.5rem)]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <>
      <EmberBackground />
      <DashboardHeader />
      <div className="container py-4 px-4 md:py-8 md:px-8">
        <div className="grid gap-4 md:gap-8">
          <SubscriptionStatus userData={userData} />

          {/* Instructions Card */}
          <Card className="bg-black/60 border-zinc-800">
            <CardHeader>
              <CardTitle className="text-lg md:text-xl">Getting Started with BuzzPlay</CardTitle>
              <CardDescription>Welcome to BuzzPlay! Follow these quick steps to set up your streaming experience:</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Setup Steps */}
              <div className="space-y-4">
                <ol className="space-y-6">
                  <li className="space-y-2">
                    <h3 className="font-medium">1. Install Emby</h3>
                    <p className="text-sm text-muted-foreground">
                      Download the Emby app from the App Store or Play Store.
                    </p>
                    <div className="mt-2">
                      
                    </div>
                  </li>
                  <li className="space-y-2">
                    <h3 className="font-medium">2. Welcome Screen</h3>
                    <p className="text-sm text-muted-foreground">
                      Open the app and click Next on the &quot;Welcome to Emby&quot; screen.
                    </p>
                    <div className="mt-2">
                      <Image
                        src="/images/emby-welcome.png"
                        alt="Emby Welcome Screen"
                        width={300}
                        height={600}
                        className="rounded-lg border border-zinc-800 mx-auto"
                        priority
                      />
                    </div>
                  </li>
                  <li className="space-y-2">
                    <h3 className="font-medium">3. Sign-In Screen</h3>
                    <p className="text-sm text-muted-foreground">
                      On the Emby Connect sign-in screen, select Skip (Emby Connect sign-in is not required).
                    </p>
                    <div className="mt-2">
                      <Image
                        src="/images/emby-signin.png"
                        alt="Emby Sign-in Screen"
                        width={300}
                        height={600}
                        className="rounded-lg border border-zinc-800 mx-auto"
                        priority
                      />
                    </div>
                  </li>
                  <li className="space-y-2">
                    <h3 className="font-medium">4. Add Server Details</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      Enter the following server information:
                    </p>
                    <div className="bg-black/40 p-3 rounded-lg space-y-2">
                      <p className="text-sm flex items-center justify-between">
                        <span>
                          <span className="font-medium">Host:</span>{" "}
                          <span className="text-muted-foreground">https://www.buzzplaymv.com</span>
                        </span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6"
                          onClick={() => {
                            navigator.clipboard.writeText("https://www.buzzplaymv.com");
                            toast({
                              description: "Host URL copied to clipboard",
                              duration: 2000,
                            });
                          }}
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                      </p>
                      <p className="text-sm flex items-center justify-between">
                        <span>
                          <span className="font-medium">Port:</span>{" "}
                          <span className="text-muted-foreground">123</span>
                        </span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6"
                          onClick={() => {
                            navigator.clipboard.writeText("123");
                            toast({
                              description: "Port number copied to clipboard",
                              duration: 2000,
                            });
                          }}
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                      </p>
                    </div>
                    <div className="mt-4">
                      <Image
                        src="/images/emby-connect.png"
                        alt="Emby Connect Screen"
                        width={300}
                        height={600}
                        className="rounded-lg border border-zinc-800 mx-auto"
                        priority
                      />
                    </div>
                    <p className="text-sm text-muted-foreground mt-2">
                      Then, click Connect.
                    </p>
                  </li>
                </ol>
              </div>

              {/* Success Message */}
              <div className="bg-emerald-500/10 border border-emerald-500/20 rounded-lg p-4">
                <p className="text-emerald-400 font-medium mb-2">You&apos;re all set!</p>
                <p className="text-sm text-muted-foreground">
                  Enjoy seamless streaming until your subscription ends. With your BuzzPlay subscription, 
                  you also get access to Emby Premiere, giving you a premium streaming experience.
                </p>
              </div>

              {/* App Buttons */}
              <div className="space-y-3 pt-2">
                <AnimatedButton className="animated-btn w-full bg-green-500 hover:bg-green-600" asChild>
                  <Link href="https://apps.apple.com/app/emby/id992180193" target="_blank">
                    iOS
                  </Link>
                </AnimatedButton>
                <Button className="w-full bg-emerald-500 hover:bg-emerald-600" asChild>
                  <Link href="https://play.google.com/store/apps/details?id=tv.emby.embyatv" target="_blank">
                    Android
                  </Link>
                </Button>
                <Button className="w-full bg-lime-600 hover:bg-lime-700" asChild>
                  <Link href="https://www.buzzplay.pw" target="_blank">
                    Watch on web
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="grid gap-4 md:gap-8 md:grid-cols-2">
            <Card className="bg-black/60 border-zinc-800">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg md:text-xl">
                  <CreditCard className="h-5 w-5" />
                  Billing
                </CardTitle>
                <CardDescription className="text-sm">Manage your subscription and payments</CardDescription>
              </CardHeader>
              <CardContent>
                <Button variant="outline" className="w-full" asChild>
                  <Link href="/dashboard/billing">View Billing History</Link>
                </Button>
              </CardContent>
            </Card>

            <Card className="bg-black/60 border-zinc-800">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg md:text-xl">
                  <Settings className="h-5 w-5" />
                  Account Settings
                </CardTitle>
                <CardDescription className="text-sm">Update your profile and preferences</CardDescription>
              </CardHeader>
              <CardContent>
                <Button variant="outline" className="w-full" asChild>
                  <Link href="/dashboard/settings">Manage Settings</Link>
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </>
  );
}


================================================================================
// File: app/dashboard/layout.tsx
================================================================================

"use client";

import { ProtectedRoute } from "@/components/protected-route";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <ProtectedRoute>{children}</ProtectedRoute>;
}


================================================================================
// File: app/dashboard/settings/page.tsx
================================================================================

"use client";

import { useState } from "react";
import { useAuthContext } from "@/components/auth-provider";
import { doc, getDoc } from "firebase/firestore";
import { updatePassword, EmailAuthProvider, reauthenticateWithCredential } from "firebase/auth";
import { db } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, ArrowLeft } from "lucide-react";
import { EmbyService } from "@/lib/services/emby";
import Link from "next/link";

export default function SettingsPage() {
  const { user } = useAuthContext();
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (newPassword !== confirmPassword) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "New passwords do not match",
      });
      return;
    }

    if (newPassword.length < 6) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "New password must be at least 6 characters long",
      });
      return;
    }

    setLoading(true);

    try {
      if (!user) throw new Error("No user logged in");
      if (!user.email) throw new Error("User email not found");

      // Get user's Emby ID first
      const userDoc = await getDoc(doc(db, "users", user.uid));
      const userData = userDoc.data();
      
      if (!userData?.embyUserId) {
        throw new Error("User not properly configured");
      }

      // First reauthenticate the user
      const credential = EmailAuthProvider.credential(
        user.email,
        currentPassword
      );
      
      await reauthenticateWithCredential(user, credential);

      // Update both services
      await Promise.all([
        updatePassword(user, newPassword),
        EmbyService.updatePassword(userData.embyUserId, newPassword)
      ]);

      // Clear form
      setCurrentPassword("");
      setNewPassword("");
      setConfirmPassword("");
      
      toast({
        title: "Success",
        description: "Your password has been updated successfully.",
      });

    } catch (error: any) {
      console.error("Password update error:", error);
      
      let errorMessage = "Failed to update password";
      if (error.code === 'auth/wrong-password') {
        errorMessage = "Current password is incorrect";
      } else if (error.code === 'auth/requires-recent-login') {
        errorMessage = "Please log in again before changing your password";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast({
        variant: "destructive",
        title: "Error",
        description: errorMessage,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container py-8">
      <div className="flex items-center mb-6">
        <Button variant="ghost" asChild className="gap-2">
          <Link href="/dashboard">
            <ArrowLeft className="h-4 w-4" />
            Back to Dashboard
          </Link>
        </Button>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Account Settings</CardTitle>
          <CardDescription>
            Update your account password
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handlePasswordChange} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="Current Password"
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="New Password"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="Confirm New Password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <Button type="submit" disabled={loading} className="w-full">
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Updating password...
                </>
              ) : (
                "Update Password"
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}


================================================================================
// File: app/dashboard/billing/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { useAuthContext } from "@/components/auth-provider";
import { doc, getDoc, collection, query, where, getDocs } from "firebase/firestore";
import { db } from "@/lib/firebase";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { format } from "date-fns";
import { Loader2, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

interface Transaction {
  id: string;
  amount: number;
  date: string;
  plan: string;
  status: string;
  duration: number;
}

export default function BillingPage() {
  const { user } = useAuthContext();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTransactions = async () => {
      if (!user) return;

      try {
        const transactionsRef = collection(db, "transactions");
        const q = query(transactionsRef, where("userId", "==", user.uid));
        const querySnapshot = await getDocs(q);
        
        const transactionData: Transaction[] = [];
        querySnapshot.forEach((doc) => {
          const data = doc.data();
          transactionData.push({
            id: doc.id,
            amount: data.amount,
            date: data.date,
            plan: data.plan,
            status: data.status,
            duration: data.duration
          });
        });

        setTransactions(transactionData.sort((a, b) => 
          new Date(b.date).getTime() - new Date(a.date).getTime()
        ));
      } catch (error) {
        console.error("Error fetching transactions:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchTransactions();
  }, [user]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-4rem)]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container py-8">
      <div className="flex items-center mb-6">
        <Button variant="ghost" asChild className="gap-2">
          <Link href="/dashboard">
            <ArrowLeft className="h-4 w-4" />
            Back to Dashboard
          </Link>
        </Button>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Billing History</CardTitle>
          <CardDescription>
            View your payment history and subscription details
          </CardDescription>
        </CardHeader>
        <CardContent>
          {transactions.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Plan</TableHead>
                  <TableHead>Duration</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {transactions.map((transaction) => (
                  <TableRow key={transaction.id}>
                    <TableCell>
                      {format(new Date(transaction.date), "PPP")}
                    </TableCell>
                    <TableCell className="capitalize">{transaction.plan}</TableCell>
                    <TableCell>{transaction.duration} months</TableCell>
                    <TableCell>MVR {transaction.amount}</TableCell>
                    <TableCell className="capitalize">{transaction.status}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <div className="text-center py-6 text-muted-foreground">
              No billing history available
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================================================
// File: app/checkout/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { doc, getDoc, collection, addDoc } from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db, storage } from "@/lib/firebase";
import { plans } from "@/lib/config/plans";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ArrowLeft, Upload, Check, Copy } from "lucide-react";
import Link from "next/link";

function CheckoutPageContent() {
  const { user } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const searchParams = useSearchParams();
  
  const [loading, setLoading] = useState(false);
  const [receipt, setReceipt] = useState<File | null>(null);
  const [currentPlan, setCurrentPlan] = useState<any>(null);

  const planName = searchParams.get("plan");
  const duration = parseInt(searchParams.get("duration") || "1");

  const selectedPlan = plans.find(
    (p) => p.name.toLowerCase() === planName?.toLowerCase()
  );

  // Calculate price based on duration and special offers
  const basePrice = selectedPlan?.price || 0;
  const specialPrice = selectedPlan?.specialOffers?.[duration as keyof typeof selectedPlan.specialOffers];
  const pricePerMonth = specialPrice || basePrice;
  const totalPrice = pricePerMonth * duration;

  useEffect(() => {
    if (user) {
      // Fetch current subscription details
      const fetchCurrentPlan = async () => {
        const userDoc = await getDoc(doc(db, "users", user.uid));
        const userData = userDoc.data();
        if (userData?.subscriptionStatus === "active") {
          setCurrentPlan({
            name: userData.plan,
            endDate: userData.subscriptionEnd,
            duration: userData.duration
          });
        }
      };
      fetchCurrentPlan();
    }
  }, [user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || !receipt || !planName || !duration) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Missing required information. Please check all fields.",
      });
      return;
    }

    // Validate plan upgrade
    if (currentPlan) {
      const currentPlanConfig = plans.find(p => p.name === currentPlan.name);
      const newPlanConfig = plans.find(p => p.name === planName);
      
      if (currentPlanConfig && newPlanConfig && currentPlanConfig.price >= newPlanConfig.price) {
        toast({
          variant: "destructive",
          title: "Invalid Plan Change",
          description: "You can only upgrade to a higher-tier plan. Please select a different plan.",
        });
        return;
      }
    }

    setLoading(true);
    try {
      // Get user's Emby ID from Firestore
      const userDoc = await getDoc(doc(db, "users", user.uid));
      const userData = userDoc.data();
      
      if (!userData?.embyUserId) {
        throw new Error("Emby user ID not found");
      }

      // Upload receipt to Storage
      const timestamp = new Date().toISOString();
      const receiptRef = ref(storage, `receipts/${user.uid}/${timestamp}_${receipt.name}`);
      await uploadBytes(receiptRef, receipt);
      const receiptUrl = await getDownloadURL(receiptRef);

      // Add receipt to Firestore subcollection
      const receiptData = {
        url: receiptUrl,
        date: timestamp,
        uploadDate: timestamp,
        amount: `MVR ${totalPrice}`,
        planName: selectedPlan?.name,
        status: 'pending',
      };

      const receiptsCollectionRef = collection(db, 'users', user.uid, 'receipts');
      await addDoc(receiptsCollectionRef, receiptData);

      // Normalize plan name for consistency
      const normalizedPlanName = selectedPlan?.name.toLowerCase();

      // Call the subscription API
      const response = await fetch('/api/subscription/activate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.uid,
          embyUserId: userData.embyUserId,
          plan: normalizedPlanName,
          duration: duration,
          amount: totalPrice,
          isUpgrade: !!currentPlan
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to activate subscription');
      }

      toast({
        title: currentPlan ? "Plan Upgraded!" : "Subscription Activated!",
        description: currentPlan 
          ? `Your subscription has been upgraded to the ${duration}-month ${normalizedPlanName} plan.`
          : `Your ${duration}-month ${normalizedPlanName} subscription has been activated.`,
      });

      router.push("/dashboard");
    } catch (error: any) {
      console.error('Subscription error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to process subscription. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  };

  // Format price with MVR
  const formatPrice = (price: number) => `MVR ${price.toLocaleString()}`;

  const copyToClipboard = async (text: string, accountHolder: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: `Account number for ${accountHolder} has been copied.`,
        duration: 2000,
      });
    } catch (err) {
      toast({
        variant: "destructive",
        title: "Failed to copy",
        description: "Please try copying manually.",
      });
    }
  };

  return (
    <div className="container max-w-xl py-8 px-4 md:py-12">
      <Button variant="ghost" asChild className="mb-6 gap-2">
        <Link href="/pricing">
          <ArrowLeft className="h-4 w-4" />
          Back to Plans
        </Link>
      </Button>

      <div className="space-y-6">
        {/* Plan Summary Card */}
        <Card className="backdrop-blur-sm bg-black/40 border-zinc-800">
          <CardHeader>
            <CardTitle>Plan Summary</CardTitle>
            <CardDescription>
              Review your selected plan details
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="rounded-lg border p-4 space-y-3">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium text-lg">{selectedPlan?.name} Plan</h3>
                  <p className="text-sm text-muted-foreground">
                    {duration} month{duration > 1 ? 's' : ''} subscription
                  </p>
                </div>
                <div className="text-right">
                  <div className="font-medium text-lg">
                    {formatPrice(pricePerMonth)}
                  </div>
                  <div className="text-sm text-muted-foreground">per month</div>
                </div>
              </div>

              {/* Features */}
              <div className="space-y-2 pt-2 border-t">
                {selectedPlan?.features.map((feature) => (
                  <div key={feature} className="flex items-start text-sm">
                    <Check className="h-4 w-4 text-primary mr-2 mt-1 flex-shrink-0" />
                    <span>{feature}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Price Breakdown */}
            <div className="rounded-lg border p-4 space-y-3">
              <h3 className="font-medium">Price Breakdown</h3>
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Monthly Price</span>
                  <span>{formatPrice(basePrice)}</span>
                </div>
                {specialPrice && specialPrice !== basePrice && (
                  <div className="flex justify-between text-sm text-green-500">
                    <span>Special Offer Discount</span>
                    <span>-{formatPrice(basePrice - specialPrice)}/mo</span>
                  </div>
                )}
                <div className="flex justify-between text-sm">
                  <span>Duration</span>
                  <span>{duration} months</span>
                </div>
                <div className="flex justify-between font-medium pt-2 border-t">
                  <span>Total Amount</span>
                  <span>{formatPrice(totalPrice)}</span>
                </div>
              </div>
            </div>

            {/* Current Plan Info (if upgrading) */}
            {currentPlan && (
              <div className="rounded-lg border border-yellow-500/20 bg-yellow-500/10 p-4">
                <h3 className="font-medium mb-2">Current Plan</h3>
                <p className="text-sm text-muted-foreground">
                  {currentPlan.name} plan active until{" "}
                  {new Date(currentPlan.endDate).toLocaleDateString()}
                </p>
                <p className="text-sm text-yellow-500 mt-2">
                  Your new plan will extend from your current end date
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Payment Upload Card */}
        <Card className="backdrop-blur-sm bg-black/40 border-zinc-800">
          <CardHeader>
            <CardTitle>
              {currentPlan ? "Upgrade Subscription" : "Complete Your Subscription"}
            </CardTitle>
            <CardDescription>
              Upload your payment receipt to activate your subscription
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Add Account Details Box */}
            <div className="mb-6 rounded-lg border p-4 space-y-3">
              <h3 className="font-medium">Bank Account Details</h3>
              <div className="space-y-2">
                <div className="flex flex-col space-y-2">
                  <button 
                    onClick={() => copyToClipboard("7730000696003", "BML")}
                    className="text-sm flex items-center justify-between p-2 hover:bg-white/5 rounded-lg transition-colors"
                  >
                    <div>
                      <span className="font-medium">BML:</span> 7730000696003
                      
                    </div>
                    <Copy className="h-4 w-4 text-muted-foreground" />
                  </button>
                  
                  
                </div>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <Label htmlFor="receipt">Upload Payment Receipt</Label>
                <div className="mt-2">
                  <Input
                    id="receipt"
                    type="file"
                    accept="image/*,application/pdf"
                    onChange={(e) => setReceipt(e.target.files?.[0] || null)}
                    required
                  />
                </div>
                <p className="text-sm text-muted-foreground mt-2">
                  Please upload your payment receipt to verify your subscription
                </p>
              </div>

              <Button type="submit" className="w-full" disabled={loading}>
                {loading && <Upload className="h-4 w-4 animate-spin mr-2" />}
                {currentPlan ? "Upgrade Plan" : "Activate Subscription"}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default function CheckoutPage() {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login');
    }
  }, [user, loading, router]);

  if (loading || !user) {
    return null;
  }

  return <CheckoutPageContent />;
}


================================================================================
// File: app/admin/page.tsx
================================================================================

import AdminDashboard from './components/AdminDashboard';

export default function AdminPage() {
  return <AdminDashboard />;
} 


================================================================================
// File: app/admin/hooks/useUsers.ts
================================================================================

import { useState, useCallback } from 'react';
import { collection, getDocs, doc, updateDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { EmbyService } from '@/lib/services/emby';
import { toast } from "@/hooks/use-toast";
import { User, Receipt } from '@/types/admin';

export function useUsers() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  const fetchUsers = useCallback(async () => {
    try {
      // First verify admin session
      const response = await fetch('/api/admin/users', {
        method: 'GET',
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error('Unauthorized');
      }

      const { users: usersData } = await response.json();
      setUsers(usersData);
    } catch (error) {
      console.error('Error fetching users:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to fetch users. Please check your permissions."
      });
    } finally {
      setLoading(false);
    }
  }, []);

  const toggleAccess = useCallback(async (userId: string, embyUserId: string, currentStatus: string) => {
    setActionLoading(userId);
    try {
      const enableAccess = currentStatus !== 'active';
      
      await EmbyService.updateUserPolicy(embyUserId, enableAccess);
      await updateDoc(doc(db, 'users', userId), {
        subscriptionStatus: enableAccess ? 'active' : 'inactive'
      });
      
      await fetchUsers();
      
      toast({
        title: "Success",
        description: `User access has been ${enableAccess ? 'enabled' : 'disabled'}`,
      });
    } catch (error) {
      console.error('Error toggling access:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update user access"
      });
    } finally {
      setActionLoading(null);
    }
  }, [fetchUsers]);

  const deleteUser = useCallback(async (userId: string, embyUserId: string) => {
    setActionLoading(userId);
    try {
      const response = await fetch('/api/admin/users/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, embyUserId }),
        credentials: 'include',
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to delete user');
      }

      setUsers(users => users.filter(user => user.id !== userId));
      toast({
        title: "Success",
        description: "User deleted successfully"
      });
    } catch (error: any) {
      console.error("Delete error:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to delete user"
      });
      throw error;
    } finally {
      setActionLoading(null);
    }
  }, []);

  return {
    users,
    loading,
    actionLoading,
    fetchUsers,
    toggleAccess,
    deleteUser
  };
} 


================================================================================
// File: app/admin/components/ReceiptsDialog.tsx
================================================================================

"use client";

import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { ExternalLink, Download, Calendar, Clock } from "lucide-react";
import { User, Receipt } from "@/types/admin";
import { useState } from "react";
import { format } from "date-fns";

interface ReceiptsDialogProps {
  user: User | null;
  onClose: () => void;
}

export function ReceiptsDialog({ user, onClose }: ReceiptsDialogProps) {
  const [selectedReceipt, setSelectedReceipt] = useState<Receipt | null>(null);

  const handleDownload = async (receipt: Receipt) => {
    try {
      const response = await fetch(receipt.url);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `receipt-${format(new Date(receipt.date), 'yyyy-MM-dd')}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error downloading receipt:', error);
    }
  };

  // Group receipts by month
  const groupedReceipts = user?.paymentReceipts?.reduce((groups, receipt) => {
    const month = format(new Date(receipt.date), 'MMMM yyyy');
    if (!groups[month]) {
      groups[month] = [];
    }
    groups[month].push(receipt);
    return groups;
  }, {} as Record<string, Receipt[]>) || {};

  return (
    <AlertDialog open={!!user} onOpenChange={onClose}>
      <AlertDialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <AlertDialogHeader>
          <AlertDialogTitle>Payment Receipts - {user?.email}</AlertDialogTitle>
          <AlertDialogDescription>
            {Object.keys(groupedReceipts).length > 0 ? (
              <div className="space-y-6 mt-4">
                {Object.entries(groupedReceipts).map(([month, receipts]) => (
                  <div key={month} className="space-y-2">
                    <h3 className="font-semibold text-lg">{month}</h3>
                    <div className="space-y-2">
                      {receipts.map((receipt) => (
                        <div 
                          key={receipt.id} 
                          className="flex items-center justify-between p-4 rounded-lg border bg-card hover:bg-accent transition-colors"
                        >
                          <div className="flex items-center space-x-4">
                            <div className="space-y-1">
                              <div className="flex items-center space-x-2">
                                <Calendar className="h-4 w-4 text-muted-foreground" />
                                <span className="font-medium">
                                  {format(new Date(receipt.date), 'dd MMM yyyy')}
                                </span>
                              </div>
                              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                                <Clock className="h-4 w-4" />
                                <span>
                                  Uploaded: {format(new Date(receipt.uploadDate), 'dd MMM yyyy HH:mm')}
                                </span>
                              </div>
                            </div>
                            {receipt.amount && (
                              <span className="text-sm font-medium bg-primary/10 text-primary px-2 py-1 rounded">
                                Amount: {receipt.amount}
                              </span>
                            )}
                            {receipt.planName && (
                              <span className="text-sm text-muted-foreground">
                                Plan: {receipt.planName}
                              </span>
                            )}
                          </div>
                          <div className="flex space-x-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => window.open(receipt.url, '_blank')}
                              className="flex items-center space-x-2"
                            >
                              <ExternalLink className="h-4 w-4" />
                              <span>View</span>
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDownload(receipt)}
                              className="flex items-center space-x-2"
                            >
                              <Download className="h-4 w-4" />
                              <span>Download</span>
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                No receipts available for this user
              </div>
            )}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Close</AlertDialogCancel>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
} 


================================================================================
// File: app/admin/components/NotificationTester.tsx
================================================================================

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';

const notificationTypes = [
  'subscription_activated',
  'subscription_expiring_soon',
  'subscription_expired',
  'payment_received',
  'payment_failed'
] as const;

export function NotificationTester() {
  const [userId, setUserId] = useState('');
  const [type, setType] = useState<typeof notificationTypes[number]>('subscription_activated');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleTest = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/test-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          type,
          data: {
            duration: 1,
            plan: 'basic',
            amount: 10,
            daysLeft: 3
          }
        })
      });

      const result = await response.json();
      
      if (!response.ok) throw new Error(result.error);
      
      toast({
        title: 'Success',
        description: 'Notification sent successfully'
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to send notification'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4 p-4 border rounded-lg">
      <h3 className="text-lg font-medium">Test Notifications</h3>
      <div className="space-y-2">
        <Input
          placeholder="User ID"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
        />
        <Select
          value={type}
          onValueChange={(value) => setType(value as typeof type)}
        >
          {notificationTypes.map((t) => (
            <option key={t} value={t}>
              {t.replace(/_/g, ' ')}
            </option>
          ))}
        </Select>
        <Button 
          onClick={handleTest} 
          disabled={loading || !userId}
        >
          {loading ? 'Sending...' : 'Test Notification'}
        </Button>
      </div>
    </div>
  );
}



================================================================================
// File: app/admin/components/UserFilters.tsx
================================================================================

"use client";

import { Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface UserFiltersProps {
  searchQuery: string;
  onSearchChange: (value: string) => void;
  statusFilter: string;
  onStatusFilterChange: (value: string) => void;
  planFilter: string;
  onPlanFilterChange: (value: string) => void;
  uniquePlans: string[];
}

export function UserFilters({
  searchQuery,
  onSearchChange,
  statusFilter,
  onStatusFilterChange,
  planFilter,
  onPlanFilterChange,
  uniquePlans,
}: UserFiltersProps) {
  return (
    <div className="flex flex-col md:flex-row gap-4 mb-6">
      <div className="relative flex-1">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search by email..."
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          className="pl-9"
        />
      </div>
      <Select value={statusFilter} onValueChange={onStatusFilterChange}>
        <SelectTrigger className="w-full md:w-48">
          <SelectValue placeholder="Filter by status" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All Status</SelectItem>
          <SelectItem value="active">Active</SelectItem>
          <SelectItem value="inactive">Inactive</SelectItem>
        </SelectContent>
      </Select>
      <Select value={planFilter} onValueChange={onPlanFilterChange}>
        <SelectTrigger className="w-full md:w-48">
          <SelectValue placeholder="Filter by plan" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All Plans</SelectItem>
          {uniquePlans.map(plan => plan && (
            <SelectItem key={plan} value={plan}>
              {plan}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
} 


================================================================================
// File: app/admin/components/AdminDashboard.tsx
================================================================================

'use client';

import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { useUsers } from '../hooks/useUsers';
import { User } from '@/types/admin';
import {
  UserTable,
  UserFilters,
  UserDetailsDialog,
  ReceiptsDialog,
  DeleteConfirmDialog,
} from './index';

export default function AdminDashboard() {
  const { users, loading, actionLoading, fetchUsers, toggleAccess, deleteUser } = useUsers();
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [planFilter, setPlanFilter] = useState<string>('all');
  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set());
  const [userToDelete, setUserToDelete] = useState<User | null>(null);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [selectedUserDetails, setSelectedUserDetails] = useState<User | null>(null);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleLogout = async () => {
    try {
      await fetch('/api/admin/logout', { method: 'POST' });
      window.location.href = '/admin/login';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  // Filter users based on search and filters
  const filteredUsers = users.filter(user => {
    const matchesSearch = user.email.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || user.subscriptionStatus === statusFilter;
    const matchesPlan = planFilter === 'all' || user.plan === planFilter;
    return matchesSearch && matchesStatus && matchesPlan;
  });

  // Get unique plans for filter dropdown
  const uniquePlans = Array.from(
    new Set(
      users
        .map(user => user.plan)
        .filter((plan): plan is string => Boolean(plan))
    )
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <>
      <div className="container mx-auto py-10">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Admin Dashboard</h1>
          <Button onClick={handleLogout} variant="outline">
            Logout
          </Button>
        </div>

        <UserFilters
          searchQuery={searchQuery}
          onSearchChange={setSearchQuery}
          statusFilter={statusFilter}
          onStatusFilterChange={setStatusFilter}
          planFilter={planFilter}
          onPlanFilterChange={setPlanFilter}
          uniquePlans={uniquePlans}
        />

        <UserTable
          users={filteredUsers}
          selectedUsers={selectedUsers}
          onSelectUser={(userId, checked) => {
            const newSelected = new Set(selectedUsers);
            if (checked) {
              newSelected.add(userId);
            } else {
              newSelected.delete(userId);
            }
            setSelectedUsers(newSelected);
          }}
          onSelectAll={(checked) => {
            if (checked) {
              setSelectedUsers(new Set(filteredUsers.map(user => user.id)));
            } else {
              setSelectedUsers(new Set());
            }
          }}
          onToggleAccess={toggleAccess}
          onDeleteUser={setUserToDelete}
          onViewReceipts={setSelectedUser}
          onViewDetails={setSelectedUserDetails}
          actionLoading={actionLoading}
        />
      </div>

      <DeleteConfirmDialog
        user={userToDelete}
        onClose={() => setUserToDelete(null)}
        onConfirm={async () => {
          if (!userToDelete) return;
          
          try {
            await deleteUser(userToDelete.id, userToDelete.embyUserId);
            setUserToDelete(null);
          } catch (error) {
            // Error is already handled in useUsers hook
            setUserToDelete(null);
          }
        }}
        loading={!!actionLoading}
      />

      <ReceiptsDialog
        user={selectedUser}
        onClose={() => setSelectedUser(null)}
      />

      <UserDetailsDialog
        user={selectedUserDetails}
        onClose={() => setSelectedUserDetails(null)}
        onUpdate={fetchUsers}
        uniquePlans={uniquePlans}
      />
    </>
  );
} 


================================================================================
// File: app/admin/components/index.ts
================================================================================

export { DeleteConfirmDialog } from './DeleteConfirmDialog';
export { ReceiptsDialog } from './ReceiptsDialog';
export { UserDetailsDialog } from './UserDetailsDialog';
export { UserFilters } from './UserFilters';
export { UserTable } from './UserTable'; 


================================================================================
// File: app/admin/components/UserTable.tsx
================================================================================

"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Loader2, Trash2 } from 'lucide-react';
import { User } from '@/types/admin';

interface UserTableProps {
  users: User[];
  selectedUsers: Set<string>;
  onSelectUser: (userId: string, checked: boolean) => void;
  onSelectAll: (checked: boolean) => void;
  onToggleAccess: (userId: string, embyUserId: string, currentStatus: string) => Promise<void>;
  onDeleteUser: (user: User) => void;
  onViewReceipts: (user: User) => void;
  onViewDetails: (user: User) => void;
  actionLoading: string | null;
}

export function UserTable({
  users,
  selectedUsers,
  onSelectUser,
  onSelectAll,
  onToggleAccess,
  onDeleteUser,
  onViewReceipts,
  onViewDetails,
  actionLoading,
}: UserTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead className="w-12">
            <input
              type="checkbox"
              checked={selectedUsers.size === users.length}
              onChange={(e) => onSelectAll(e.target.checked)}
              className="rounded border-gray-300"
            />
          </TableHead>
          <TableHead>Email</TableHead>
          <TableHead>Subscription Status</TableHead>
          <TableHead>Plan</TableHead>
          <TableHead>Subscription End</TableHead>
          <TableHead>Receipts</TableHead>
          <TableHead>Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.id}>
            <TableCell>
              <input
                type="checkbox"
                checked={selectedUsers.has(user.id)}
                onChange={(e) => onSelectUser(user.id, e.target.checked)}
                className="rounded border-gray-300"
              />
            </TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell>{user.subscriptionStatus}</TableCell>
            <TableCell>{user.plan || 'N/A'}</TableCell>
            <TableCell>
              {user.subscriptionEnd 
                ? new Date(user.subscriptionEnd).toLocaleDateString()
                : 'N/A'}
            </TableCell>
            <TableCell>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onViewReceipts(user)}
                disabled={!user.paymentReceipts?.length}
                className="flex items-center space-x-2"
              >
                <span>Receipts</span>
                {user.paymentReceipts?.length ? (
                  <span className="inline-flex items-center justify-center w-5 h-5 text-xs font-medium rounded-full bg-primary/10 text-primary">
                    {user.paymentReceipts.length}
                  </span>
                ) : null}
              </Button>
            </TableCell>
            <TableCell className="space-x-2">
              <Button
                variant={user.subscriptionStatus === 'active' ? 'destructive' : 'default'}
                onClick={() => onToggleAccess(user.id, user.embyUserId, user.subscriptionStatus)}
                disabled={!!actionLoading}
                className="mr-2"
              >
                {actionLoading === user.id ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  user.subscriptionStatus === 'active' ? 'Disable Access' : 'Enable Access'
                )}
              </Button>
              <Button
                variant="destructive"
                size="icon"
                onClick={() => onDeleteUser(user)}
                disabled={!!actionLoading}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
} 


================================================================================
// File: app/admin/components/DeleteConfirmDialog.tsx
================================================================================

"use client";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Loader2 } from "lucide-react";
import { User } from "@/types/admin";

interface DeleteConfirmDialogProps {
  user: User | null;
  onClose: () => void;
  onConfirm: () => Promise<void>;
  loading: boolean;
}

export function DeleteConfirmDialog({
  user,
  onClose,
  onConfirm,
  loading,
}: DeleteConfirmDialogProps) {
  return (
    <AlertDialog open={!!user} onOpenChange={() => !loading && onClose()}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you sure?</AlertDialogTitle>
          <AlertDialogDescription className="text-muted-foreground">
            This will permanently delete the user {user?.email} from both Firebase and Emby.
            This action cannot be undone.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel onClick={onClose} disabled={loading}>
            Cancel
          </AlertDialogCancel>
          <AlertDialogAction onClick={onConfirm} disabled={loading}>
            {loading && <Loader2 className="h-4 w-4 animate-spin mr-2" />}
            Delete
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
} 


================================================================================
// File: app/admin/components/UserDetailsDialog.tsx
================================================================================

"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { User } from "@/types/admin";
import { doc, updateDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { toast } from "@/hooks/use-toast";

interface UserDetailsDialogProps {
  user: User | null;
  onClose: () => void;
  onUpdate: () => Promise<void>;
  uniquePlans: string[];
}

export function UserDetailsDialog({
  user,
  onClose,
  onUpdate,
  uniquePlans,
}: UserDetailsDialogProps) {
  const handleUpdateUserDetails = async (updatedData: Partial<User>) => {
    if (!user) return;

    try {
      await updateDoc(doc(db, 'users', user.id), updatedData);
      await onUpdate();
      toast({
        title: "Success",
        description: "User details updated successfully",
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update user details",
      });
    }
  };

  return (
    <Dialog open={!!user} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>User Details</DialogTitle>
        </DialogHeader>
        {user && (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium">Email</label>
                <p className="mt-1">{user.email}</p>
              </div>
              <div>
                <label className="text-sm font-medium">Emby User ID</label>
                <p className="mt-1">{user.embyUserId}</p>
              </div>
              <div>
                <label className="text-sm font-medium">Plan</label>
                <Select
                  value={user.plan || ''}
                  onValueChange={(value) => handleUpdateUserDetails({ plan: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a plan" />
                  </SelectTrigger>
                  <SelectContent>
                    {uniquePlans.map(plan => plan && (
                      <SelectItem key={plan} value={plan}>
                        {plan}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label className="text-sm font-medium">Subscription End</label>
                <Input
                  type="date"
                  value={user.subscriptionEnd?.split('T')[0] || ''}
                  onChange={(e) => handleUpdateUserDetails({ 
                    subscriptionEnd: new Date(e.target.value).toISOString() 
                  })}
                />
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
} 


================================================================================
// File: app/admin/login/page.tsx
================================================================================

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Loader2 } from 'lucide-react';

export default function AdminLogin() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      console.log('Attempting login...'); // Debug log
      
      const response = await fetch('/api/admin/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
        credentials: 'include', // Important for cookies
      });

      const data = await response.json();
      console.log('Login response:', data); // Debug log

      if (data.success) {
        console.log('Login successful, redirecting...'); // Debug log
        window.location.href = '/admin';
      } else {
        console.log('Login failed:', data.error); // Debug log
        setError(data.error || 'Invalid credentials');
      }
    } catch (error) {
      console.error('Login error:', error);
      setError('An error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-lg dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center">Admin Login</h1>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="username" className="block text-sm font-medium">
              Username
            </label>
            <Input
              id="username"
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              className="w-full"
              placeholder="Enter username"
            />
          </div>

          <div className="space-y-2">
            <label htmlFor="password" className="block text-sm font-medium">
              Password
            </label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="w-full"
              placeholder="Enter password"
            />
          </div>

          {error && (
            <div className="text-sm text-red-500 font-medium">
              {error}
            </div>
          )}

          <Button
            type="submit"
            className="w-full"
            disabled={loading || !username || !password}
          >
            {loading ? (
              <div className="flex items-center justify-center">
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                <span>Logging in...</span>
              </div>
            ) : (
              'Login'
            )}
          </Button>
        </form>
      </div>
    </div>
  );
} 


================================================================================
// File: app/register/page.tsx
================================================================================

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { createUserWithEmailAndPassword, sendEmailVerification, signOut } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";
import { auth, db } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import { Film, Loader2, Eye, EyeOff } from "lucide-react";

export default function RegisterPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();
  const { toast } = useToast();

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Passwords do not match",
      });
      return;
    }
    
    setLoading(true);

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      const actionCodeSettings = {
        url: `${process.env.NEXT_PUBLIC_APP_URL}/auth/action`,
        handleCodeInApp: false,
        continueUrl: `${process.env.NEXT_PUBLIC_APP_URL}/auth/action?email=${encodeURIComponent(email)}`
      };
      await sendEmailVerification(user, actionCodeSettings);

      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || data.details || 'Registration failed');
      }

      if (!data.Id) {
        throw new Error('Invalid response from streaming service');
      }

      await setDoc(doc(db, "users", user.uid), {
        email: user.email,
        embyUserId: data.Id,
        subscriptionStatus: "inactive",
        subscriptionEnd: null,
        plan: null,
        emailVerified: false,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });

      await signOut(auth);

      toast({
        title: "Account created successfully!",
        description: "Please check your email to verify your account before logging in.",
      });

      router.push(`/auth/verification-sent?email=${encodeURIComponent(email)}`);
    } catch (error: any) {
      console.error("Registration error:", error);
      await signOut(auth);
      
      toast({
        variant: "destructive",
        title: "Registration failed",
        description: error.message || "An error occurred during registration",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container flex h-screen w-screen flex-col items-center justify-center">
      <Card className="w-[90%] max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <Film className="h-8 w-8 text-cyan" />
          </div>
          <CardTitle className="text-2xl text-center">Create an account</CardTitle>
          <CardDescription className="text-center">
            Enter your email and password below to create your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleRegister} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <div className="space-y-2">
              <div className="relative">
                <Input
                  type={showPassword ? "text" : "password"}
                  placeholder="Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  disabled={loading}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-2.5 text-muted-foreground hover:text-foreground"
                >
                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                </button>
              </div>
            </div>
            <div className="space-y-2">
              <div className="relative">
                <Input
                  type={showConfirmPassword ? "text" : "password"}
                  placeholder="Confirm Password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                  disabled={loading}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-2 top-2.5 text-muted-foreground hover:text-foreground"
                >
                  {showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                </button>
              </div>
            </div>
            <Button className="w-full" type="submit" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating account...
                </>
              ) : (
                "Create account"
              )}
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Already have an account?{" "}
            <Link href="/login" className="text-cyan hover:underline">
              Sign in
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================================================
// File: app/faq/page.tsx
================================================================================

"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

const faqs = [
  {
    question: "What is BuzzPlay?",
    answer: "BuzzPlay is a streaming service that offers a wide variety of movies, TV shows, anime, documentaries, and more. With BuzzPlay, you'll have endless entertainment options right at your fingertips."
  },
  {
    question: "How much does BuzzPlay cost?",
    answer: "Enjoy BuzzPlay on your smartphone, tablet, smart TV, laptop, or streaming device for one affordable monthly fee. Plans range from MVR 89 to MVR 219, with no additional charges or contracts—pay only for the plan that fits your needs. Our mobile-only plan starts at MVR 89 for single-device streaming."
  },
  {
    question: "Can I upgrade or downgrade my subscription?",
    answer: "Yes! BuzzPlay allows you to upgrade or downgrade your subscription with ease. When you upgrade to a higher-priced plan, the new plan takes effect immediately so you can start enjoying the added features right away. Any remaining days on your current package will stay active, and your new plan will be effective from now onward. If you choose to downgrade to a lower-priced plan, the change will take effect on your next billing date. You can continue to enjoy the features of your current higher-priced plan until then. If you need help with upgrading or downgrading your subscription, feel free to reach out to us. We're here to assist!"
  },
  {
    question: "Can I set my subscription to auto-renew?",
    answer: "Currently, we don't offer an auto-renew feature. However, you can choose from flexible subscription plans, including 1-month, 3-month, or 6-month commitments, to suit your preference."
  },
  {
    question: "How do I cancel my subscription?",
    answer: "BuzzPlay is commitment-free. There are no contracts, and you can cancel anytime without fees."
  },
  {
    question: "What can I watch on BuzzPlay?",
    answer: "BuzzPlay offers an extensive library of content, including feature films, documentaries, TV shows, anime, and much more. Watch as much as you want, whenever you want."
  },
  {
    question: "Is BuzzPlay suitable for kids?",
    answer: "Yes, BuzzPlay includes family-friendly and kid-focused content. We're constantly expanding our library with titles that are appropriate for younger audiences, so there's something for everyone to enjoy."
  },
  {
    question: "What internet speed do I need for BuzzPlay?",
    answer: "To ensure a smooth streaming experience, we recommend a sustained download speed of at least 5 Mbps. You can adjust your bitrate settings within the app to help save on data usage when necessary. Our video quality automatically adjusts based on your internet speed and device, delivering the best possible stream for your connection."
  },
  {
    question: "Can I watch on multiple devices?",
    answer: "Yes! BuzzPlay offers flexible plans that allow you to stream on multiple devices simultaneously. Choose the plan that fits your household and enjoy watching on any combination of devices."
  },
  {
    question: "How can I reach customer support?",
    answer: "If you have any special requests, content recommendations, or need assistance, our support team is here to help. Contact us directly through our social media channels or Telegram for quick responses."
  }
];

export default function FAQPage() {
  return (
    <div className="container max-w-4xl py-8 px-4 md:py-12">
      <Card className="backdrop-blur-sm bg-black/40 border-zinc-800">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl font-bold">Frequently Asked Questions</CardTitle>
          <CardDescription>
            Find answers to common questions about BuzzPlay
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <Accordion type="single" collapsible className="w-full">
            {faqs.map((faq, index) => (
              <AccordionItem key={index} value={`item-${index}`}>
                <AccordionTrigger className="text-left">
                  {faq.question}
                </AccordionTrigger>
                <AccordionContent className="text-muted-foreground">
                  {faq.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </CardContent>
      </Card>
    </div>
  );
} 


================================================================================
// File: app/auth/verify-email/page.tsx
================================================================================

"use client";

import React, { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { applyActionCode, sendEmailVerification } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import Link from "next/link";

export default function VerifyEmailPage() {
  const [verifying, setVerifying] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const searchParams = useSearchParams();
  
  useEffect(() => {
    async function verifyEmail() {
      try {
        // Get all URL parameters
        const params = new URLSearchParams(window.location.search);
        const oobCode = params.get('oobCode');
        const mode = params.get('mode');

        if (!oobCode || mode !== 'verifyEmail') {
          setError("Invalid verification link. Please request a new one.");
          setVerifying(false);
          return;
        }

        console.log('Starting verification process...');
        await applyActionCode(auth, oobCode);
        
        // Reload the user to update the emailVerified property
        if (auth.currentUser) {
          await auth.currentUser.reload();
        }
        
        // Wait briefly to show success state before redirecting
        setTimeout(() => {
          router.push("/login?verified=true");
        }, 2000);
      } catch (error: any) {
        console.error("Email verification error:", error);
        setError(
          error.code === 'auth/invalid-action-code'
            ? "This verification link has expired or already been used."
            : "Failed to verify email. Please try again."
        );
      } finally {
        setVerifying(false);
      }
    }

    verifyEmail();
  }, [router]);

  if (verifying) {
    return (
      <div className="container flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin" />
          <p>Verifying your email...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Verification Failed</CardTitle>
            <CardDescription className="text-center">
              {error}
            </CardDescription>
          </CardHeader>
          <CardContent className="flex justify-center">
            <Link href="/login">
              <Button>Return to Login</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container flex items-center justify-center min-h-screen">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Email Verified!</CardTitle>
          <CardDescription className="text-center">
            Your email has been successfully verified. Redirecting to login...
          </CardDescription>
        </CardHeader>
      </Card>
    </div>
  );
} 


================================================================================
// File: app/auth/action/page.tsx
================================================================================

"use client";

import React, { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { applyActionCode, signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { doc, updateDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useToast } from "@/hooks/use-toast";

export default function ActionPage() {
  const [verifying, setVerifying] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();
  
  useEffect(() => {
    async function handleAction() {
      try {
        const mode = searchParams.get('mode');
        const oobCode = searchParams.get('oobCode');
        const email = searchParams.get('email');

        if (!mode || !oobCode) {
          setError("Invalid action link");
          setVerifying(false);
          return;
        }

        if (mode === 'verifyEmail') {
          console.log('Starting verification process...');
          await applyActionCode(auth, oobCode);
          
          // Try to sign in the user to get their UID
          if (email) {
            try {
              const userCred = await signInWithEmailAndPassword(auth, email, '');
              const user = userCred.user;
              
              // Update Firestore
              await updateDoc(doc(db, "users", user.uid), {
                emailVerified: true,
                updatedAt: new Date().toISOString()
              });

              // Sign out after updating
              await auth.signOut();
            } catch (error) {
              console.warn('Could not auto-update Firestore:', error);
              // Continue with verification success even if Firestore update fails
            }
          }
          
          toast({
            title: "Email Verified",
            description: "Your email has been successfully verified. You can now log in.",
          });
          
          // Redirect to login with verified flag
          setTimeout(() => {
            router.push("/login?verified=true");
          }, 2000);
        } else {
          setError("Unsupported action type");
        }
      } catch (error: any) {
        console.error("Action handling error:", error);
        setError(
          error.code === 'auth/invalid-action-code'
            ? "This link has expired or already been used."
            : "Failed to process request. Please try again."
        );
      } finally {
        setVerifying(false);
      }
    }

    handleAction();
  }, [searchParams, router, toast]);

  if (verifying) {
    return (
      <div className="container flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin" />
          <p>Processing your request...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Action Failed</CardTitle>
            <CardDescription className="text-center">
              {error}
            </CardDescription>
          </CardHeader>
          <CardContent className="flex justify-center">
            <Link href="/login">
              <Button>Return to Login</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container flex items-center justify-center min-h-screen">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Email Verified!</CardTitle>
          <CardDescription className="text-center">
            Your email has been successfully verified. Redirecting to login...
          </CardDescription>
        </CardHeader>
      </Card>
    </div>
  );
}


================================================================================
// File: app/auth/verification-sent/page.tsx
================================================================================

"use client";

import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Mail, Loader2 } from "lucide-react";
import Link from "next/link";
import { useToast } from "@/hooks/use-toast";
import { useSearchParams } from "next/navigation";

export default function VerificationSentPage() {
  const [resending, setResending] = useState(false);
  const { toast } = useToast();
  const searchParams = useSearchParams();
  const email = searchParams.get("email");

  const handleResendVerification = async () => {
    if (!email) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "No email address found. Please try registering again.",
      });
      return;
    }
    
    setResending(true);
    try {
      const response = await fetch('/api/auth/resend-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to resend verification email');
      }

      toast({
        title: "Verification email sent",
        description: "Please check your inbox for the verification link.",
      });
    } catch (error: any) {
      console.error('Error resending verification:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to resend verification email. Please try again.",
      });
    } finally {
      setResending(false);
    }
  };

  return (
    <div className="container flex items-center justify-center min-h-screen">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <Mail className="h-12 w-12 text-primary" />
          </div>
          <CardTitle className="text-2xl text-center">Check Your Email</CardTitle>
          <CardDescription className="text-center">
            We&apos;ve sent you a verification link. Please check your email and click the link to verify your account.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex flex-col items-center space-y-4">
          <p className="text-sm text-muted-foreground text-center">
            The verification link will expire in 24 hours. If you don&apos;t see the email, please check your spam folder.
          </p>
          <div className="flex flex-col space-y-2 w-full">
            <Button
              variant="secondary"
              onClick={handleResendVerification}
              disabled={resending || !email}
              className="w-full"
            >
              {resending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Resending...
                </>
              ) : (
                "Resend verification email"
              )}
            </Button>
            <Link href="/login" className="w-full">
              <Button variant="outline" className="w-full">
                Return to Login
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 


================================================================================
// File: app/layout.tsx
================================================================================

import "./globals.css";
import type { Metadata, Viewport } from "next";
import { Inter } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider";
import { SiteHeader } from "@/components/site-header";
import { Toaster } from "@/components/ui/toaster";
import { AuthProvider } from "@/components/auth-provider";
import { ErrorBoundary } from '@/components/error-boundary';
import { Footer } from "@/components/ui/footer";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: {
    default: "BuzzPlay - Your Streaming Entertainment Hub",
    template: "%s | BuzzPlay"
  },
  description: "Stream unlimited movies, TV shows, and more on BuzzPlay. Start watching today with our premium streaming service.",
  keywords: ["streaming", "movies", "TV shows", "entertainment", "BuzzPlay", "watch online"],
  authors: [{ name: "BuzzPlay" }],
  creator: "BuzzPlay",
  publisher: "BuzzPlay",
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  metadataBase: new URL('https://BuzzPlay.com'),
  openGraph: {
    type: 'website',
    locale: 'en_US',
    url: 'https://BuzzPlay.com',
    title: 'BuzzPlayy - Your Streaming Entertainment Hub',
    description: 'Stream unlimited movies, TV shows, and more on BuzzPlay. Start watching today with our premium streaming service.',
    siteName: 'BuzzPlay',
    images: [
      {
        url: 'https://BuzzPlay.com/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'BuzzPlay - Streaming Entertainment',
      },
    ],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'BuzzPlay - Your Streaming Entertainment Hub',
    description: 'Stream unlimited movies, TV shows, and more on BuzzPlay. Start watching today with our premium streaming service.',
    images: ['https://BuzzPlay.com/twitter-image.jpg'],
    creator: '@BuzzPlay',
  },
};

export const viewport: Viewport = {
  themeColor: [
    { media: "(prefers-color-scheme: light)", color: "#ffffff" },
    { media: "(prefers-color-scheme: dark)", color: "#000000" }
  ],
  width: 'device-width',
  initialScale: 1,
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <ErrorBoundary>
          <ThemeProvider>
            <AuthProvider>
              <div className="relative min-h-screen flex flex-col">
                <SiteHeader />
                <main className="flex-1">{children}</main>
                <Footer />
              </div>
              <Toaster />
            </AuthProvider>
          </ThemeProvider>
        </ErrorBoundary>
      </body>
    </html>
  );
}


================================================================================
// File: app/api/route.ts
================================================================================

import { rateLimit } from '@/lib/rate-limit';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    // Get IP address as identifier for rate limiting
    const ip = request.headers.get('x-real-ip') ?? request.headers.get('x-forwarded-for') ?? 'unknown';
    const rateLimitResult = await rateLimit.check(ip, { limit: 5, window: '1m' });
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { error: 'Too many requests' },
        { status: 429 }
      );
    }
    
    // Continue with the request
    // ... existing code ...
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/subscription/activate/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { adminDb } from '@/lib/firebase-admin';
import { EmbyService } from '@/lib/services/emby';
import { plans } from '@/lib/config/plans';

export async function POST(request: Request) {
  try {
    const { userId, embyUserId, plan, duration, amount } = await request.json();
    
    // Get current user subscription
    const userDoc = await adminDb.collection('users').doc(userId).get();
    const userData = userDoc.data();
    const currentPlan = userData?.plan;
    const isUpgrade = currentPlan && userData?.subscriptionStatus === 'active';

    if (!userId || !embyUserId || !plan || !duration || !amount) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Normalize plan name to match plans configuration
    const normalizedPlanName = plan.charAt(0).toUpperCase() + plan.slice(1).toLowerCase();
    const selectedPlan = plans.find(p => p.name === normalizedPlanName);
    
    if (!selectedPlan) {
      throw new Error(`Invalid plan selected: ${plan}`);
    }

    // Calculate subscription end date
    const subscriptionEnd = new Date();
    if (isUpgrade && userData.subscriptionEnd) {
      // If upgrading, add duration to existing end date
      subscriptionEnd.setTime(new Date(userData.subscriptionEnd).getTime());
    }
    subscriptionEnd.setMonth(subscriptionEnd.getMonth() + duration);

    // Set bitrate based on plan type
    let maxStreamingBitrate;
    if (selectedPlan.name.toLowerCase() === 'mobile') {
      maxStreamingBitrate = 480000000; // 480p
    } else {
      maxStreamingBitrate = 1080000000; // 1080p
    }

    // Enable Emby user access with plan-specific settings
    await EmbyService.updateUserPolicy(
      embyUserId, 
      true, 
      selectedPlan.deviceLimit,
      maxStreamingBitrate
    );

    // Update user document in Firestore
    await adminDb.collection('users').doc(userId).update({
      plan: normalizedPlanName,
      subscriptionStatus: 'active',
      subscriptionEnd: subscriptionEnd.toISOString(),
      duration: duration,
      lastPayment: {
        amount: amount,
        date: new Date().toISOString(),
        plan: normalizedPlanName
      }
    });

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('Error in subscription activation:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to activate subscription' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/subscription/process/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { EmbyService } from '@/lib/services/emby';
import { adminDb } from '@/lib/firebase-admin';

export async function POST(request: Request) {
  try {
    const { userId, embyUserId, plan, duration, amount } = await request.json();
    
    if (!userId || !embyUserId || !plan || !duration || !amount) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Calculate subscription end date
    const subscriptionEnd = new Date();
    subscriptionEnd.setMonth(subscriptionEnd.getMonth() + duration);

    // Enable Emby user access
    await EmbyService.updateUserPolicy(embyUserId, true);

    // Update Firestore document
    await adminDb.collection('users').doc(userId).update({
      subscriptionStatus: 'active',
      subscriptionEnd: subscriptionEnd.toISOString(),
      plan: plan,
      updatedAt: new Date().toISOString()
    });

    return NextResponse.json({ 
      success: true,
      subscriptionEnd: subscriptionEnd.toISOString()
    });
  } catch (error: any) {
    console.error('Error processing subscription:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to process subscription' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/check-subscriptions/route.ts
================================================================================

import { NextResponse } from "next/server";
import { adminDb } from '@/lib/firebase-admin';
import { NotificationService } from '@/lib/services/notification';
import { EmbyService } from '@/lib/services/emby';
import { handleSubscriptionExpiration } from '@/lib/subscription';
import { logger } from '@/lib/logger';
import { metrics } from '@/lib/metrics';

const BATCH_SIZE = 100;

async function processExpiredSubscription(
  userId: string, 
  userData: any
): Promise<{ success: boolean; error?: string }> {
  try {
    await handleSubscriptionExpiration(userId, userData.embyUserId);
    await EmbyService.updateUserPolicy(userData.embyUserId, false);
    await NotificationService.sendSubscriptionNotification(
      userId,
      'subscription_expired',
      {
        duration: userData.duration,
        plan: userData.plan,
        name: userData.name,
        email: userData.email
      }
    );

    logger.info('Subscription expired and processed', {
      userId,
      plan: userData.plan,
      duration: userData.duration
    });

    metrics.increment('subscription.expired', 1, {
      plan: userData.plan,
      duration: String(userData.duration)
    });

    return { success: true };
  } catch (error) {
    logger.error('Failed to process expired subscription', {
      userId,
      error: error instanceof Error ? error.message : 'Unknown error'
    });

    metrics.increment('subscription.expired.error', 1, {
      plan: userData.plan,
      duration: String(userData.duration)
    });

    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Processing failed' 
    };
  }
}

export async function GET() {
  try {
    const startTime = Date.now();
    const now = new Date().toISOString();
    
    const expiredSubscriptions = await adminDb
      .collection('users')
      .where('subscriptionStatus', '==', 'active')
      .where('subscriptionEnd', '<', now)
      .limit(BATCH_SIZE)
      .get();

    if (expiredSubscriptions.empty) {
      logger.info('No expired subscriptions found');
      return NextResponse.json({ 
        success: true, 
        message: 'No expired subscriptions found' 
      });
    }

    const results = await Promise.allSettled(
      expiredSubscriptions.docs.map(async (doc) => {
        const userData = doc.data();
        return processExpiredSubscription(doc.id, userData);
      })
    );

    const summary = results.reduce((acc, result) => {
      if (result.status === 'fulfilled') {
        acc[result.value.success ? 'succeeded' : 'failed']++;
        if (!result.value.success) {
          acc.errors.push(result.value.error || 'Unknown error');
        }
      } else {
        acc.failed++;
        acc.errors.push(result.reason?.message || 'Promise rejection');
      }
      return acc;
    }, { succeeded: 0, failed: 0, errors: [] as string[] });

    // Track execution time
    const executionTime = Date.now() - startTime;
    metrics.histogram('subscription.check.duration', executionTime);

    // Track success/failure metrics
    metrics.gauge('subscription.check.total', expiredSubscriptions.size);
    metrics.gauge('subscription.check.succeeded', summary.succeeded);
    metrics.gauge('subscription.check.failed', summary.failed);

    logger.info('Subscription check completed', {
      total: expiredSubscriptions.size,
      ...summary,
      executionTime
    });

    return NextResponse.json({
      success: true,
      summary: {
        total: expiredSubscriptions.size,
        ...summary,
        executionTime
      }
    });

  } catch (error) {
    logger.error('Failed to check subscriptions', {
      error: error instanceof Error ? error.message : 'Unknown error'
    });

    metrics.increment('subscription.check.error', 1);

    return NextResponse.json(
      { 
        error: 'Failed to process expired subscriptions',
        details: error instanceof Error ? error.message : undefined
      },
      { status: 500 }
    );
  }
}


================================================================================
// File: app/api/admin/logout/route.ts
================================================================================

import { NextResponse } from 'next/server';

export async function POST() {
  const response = NextResponse.json({ success: true });
  response.cookies.set('adminLoggedIn', '', {
    expires: new Date(0),
  });
  
  return response;
} 


================================================================================
// File: app/api/admin/users/route.ts
================================================================================

import { NextRequest, NextResponse } from 'next/server';
import { adminDb } from '@/lib/firebase-admin';
import { cookies } from 'next/headers';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function GET(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const adminLoggedIn = (await cookieStore).get('adminLoggedIn')?.value;
    
    if (!adminLoggedIn || adminLoggedIn !== 'true') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Fetch users from Firestore using admin SDK
    const usersSnapshot = await adminDb.collection('users').get();
    const usersData = await Promise.all(
      usersSnapshot.docs.map(async (doc) => {
        const userData = doc.data();
        
        // Fetch receipts collection for each user
        const receiptsSnapshot = await adminDb
          .collection('users')
          .doc(doc.id)
          .collection('receipts')
          .get();

        const receipts = receiptsSnapshot.docs.map(receiptDoc => {
          const receiptData = receiptDoc.data();
          return {
            id: receiptDoc.id,
            url: receiptData.url,
            date: receiptData.date,
            amount: receiptData.amount,
            planName: receiptData.planName,
            uploadDate: receiptData.uploadDate || receiptData.date
          };
        });

        // Sort receipts by date, newest first
        receipts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

        return {
          id: doc.id,
          ...userData,
          paymentReceipts: receipts,
        };
      })
    );

    return NextResponse.json({ users: usersData });
  } catch (error: any) {
    console.error('Error in users route:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to fetch users' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/admin/users/delete/route.ts
================================================================================

import { NextRequest, NextResponse } from 'next/server';
import { EmbyService } from '@/lib/services/emby';
import { getAuth } from 'firebase-admin/auth';
import { adminDb } from '@/lib/firebase-admin';
import { cookies } from 'next/headers';

// Define the expected request body type
interface DeleteUserRequest {
  userId: string;
  embyUserId: string;
}

// Add runtime configuration
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const adminLoggedIn = (await cookieStore).get('adminLoggedIn')?.value;
    
    if (!adminLoggedIn || adminLoggedIn !== 'true') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Parse request body
    const { userId, embyUserId } = await request.json();
    
    if (!userId || !embyUserId) {
      return NextResponse.json(
        { error: 'Missing user IDs' },
        { status: 400 }
      );
    }

    // Delete from Firebase Auth
    try {
      await getAuth().deleteUser(userId);
    } catch (error: any) {
      if (error.code !== 'auth/user-not-found') {
        console.error('Error deleting Firebase user:', error);
      }
    }

    // Delete from Emby
    try {
      await EmbyService.deleteUser(embyUserId);
    } catch (error) {
      console.warn('Error deleting Emby user:', error);
    }

    // Delete from Firestore
    await adminDb.collection('users').doc(userId).delete();

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('Error in delete user route:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to delete user' },
      { status: 500 }
    );
  }
}

// Add OPTIONS handler for CORS
export async function OPTIONS(request: NextRequest) {
  return NextResponse.json({}, { status: 200 });
} 


================================================================================
// File: app/api/admin/delete-firebase-user/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { getAuth } from 'firebase-admin/auth';

export async function POST(request: Request) {
  try {
    const { userId } = await request.json();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'No user ID provided' },
        { status: 400 }
      );
    }

    // Delete the user from Firebase Auth
    await getAuth().deleteUser(userId);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting Firebase user:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to delete user from authentication',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/admin/login/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function POST(request: Request) {
  try {
    const { username, password } = await request.json();
    
    console.log('Login attempt with:', username);

    if (
      username === process.env.NEXT_PUBLIC_ADMIN_USERNAME &&
      password === process.env.ADMIN_PASSWORD
    ) {
      const response = NextResponse.json({ success: true });
      
      response.cookies.set('adminLoggedIn', 'true', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        path: '/',
        maxAge: 60 * 60 * 24 // 24 hours
      });

      return response;
    }

    return NextResponse.json(
      { error: 'Invalid credentials' },
      { status: 401 }
    );
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/emby/reset-password/route.ts
================================================================================

import { EmbyService } from "@/lib/services/emby";
import { adminDb } from "@/lib/firebase-admin";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const { email, password } = await request.json();
    console.log('Received password reset request for:', email);

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email and password are required' },
        { status: 400 }
      );
    }

    // Get user's Emby ID from Firestore
    const userSnapshot = await adminDb
      .collection('users')
      .where('email', '==', email.toLowerCase())
      .limit(1)
      .get();
    
    if (userSnapshot.empty) {
      console.error('User not found in Firestore:', email);
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    const userData = userSnapshot.docs[0].data();
    const embyUserId = userData.embyUserId;

    if (!embyUserId) {
      console.error('Emby ID not found for user:', email);
      return NextResponse.json(
        { error: 'Emby ID not found' },
        { status: 404 }
      );
    }

    // Update Emby password
    await EmbyService.updatePassword(embyUserId, password);
    console.log('Successfully reset Emby password for user:', email);

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('Error resetting Emby password:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to reset Emby password' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/auth/resend-verification/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { getAuth } from "firebase-admin/auth";
import { adminDb } from "@/lib/firebase-admin";

export async function POST(request: Request) {
  try {
    const { email } = await request.json();

    if (!email) {
      return NextResponse.json(
        { error: 'Email is required' },
        { status: 400 }
      );
    }

    // Get user by email using Firebase Admin
    const userRecord = await getAuth().getUserByEmail(email);

    if (!userRecord) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    // Generate email verification link with correct settings
    const actionCodeSettings = {
      url: `${process.env.NEXT_PUBLIC_APP_URL}/auth/action`,
      handleCodeInApp: false,
      continueUrl: `${process.env.NEXT_PUBLIC_APP_URL}/auth/action?email=${encodeURIComponent(email)}`
    };

    const verificationLink = await getAuth().generateEmailVerificationLink(
      email,
      actionCodeSettings
    );

    // Here you would typically send the email using your email service
    // For development, we'll return the link
    console.log('Generated verification link:', verificationLink);

    return NextResponse.json({ 
      success: true,
      message: "Verification email sent successfully",
      // Only include verificationLink in development
      ...(process.env.NODE_ENV === 'development' && { verificationLink })
    });
  } catch (error: any) {
    console.error('Error sending verification email:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to send verification email' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/auth/[...nextauth]/route.ts
================================================================================

import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "@/lib/firebase";

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) return null;
        
        try {
          const userCredential = await signInWithEmailAndPassword(
            auth,
            credentials.email,
            credentials.password
          );
          
          return {
            id: userCredential.user.uid,
            email: credentials.email || "",
          };
        } catch (error) {
          return null;
        }
      }
    })
  ],
  pages: {
    signIn: '/login',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id as string;
      }
      return session;
    }
  },
  session: {
    strategy: "jwt",
  },
});

export { handler as GET, handler as POST };


================================================================================
// File: app/api/auth/verify-email/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { getAuth } from "firebase-admin/auth";
import { adminDb } from "@/lib/firebase-admin";

export async function POST(request: Request) {
  try {
    const { userId } = await request.json();

    if (!userId) {
      return NextResponse.json(
        { error: 'User ID is required' },
        { status: 400 }
      );
    }

    // Get user from Firebase Auth
    const userRecord = await getAuth().getUser(userId);

    // Update Firestore
    await adminDb.collection('users').doc(userId).update({
      emailVerified: userRecord.emailVerified,
      updatedAt: new Date().toISOString()
    });

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('Error syncing verification state:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to sync verification state' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/auth/register/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { EmbyService } from '@/lib/services/emby';
import { headers } from 'next/headers';

export async function POST(request: Request) {
    try {
        // Add CORS headers
        const headersList = await headers();
        const origin = headersList.get('origin') || '*';

        // Parse request body
        let body;
        try {
            body = await request.json();
        } catch (e) {
            return new NextResponse(
                JSON.stringify({ error: 'Invalid JSON payload' }),
                {
                    status: 400,
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': origin,
                        'Access-Control-Allow-Methods': 'POST, OPTIONS',
                        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                    },
                }
            );
        }

        const { email, password } = body;

        if (!email || !password) {
            return NextResponse.json(
                { error: 'Email and password are required' },
                {
                    status: 400,
                    headers: {
                        'Access-Control-Allow-Origin': origin,
                        'Access-Control-Allow-Methods': 'POST, OPTIONS',
                        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                    },
                }
            );
        }

        const embyUser = await EmbyService.createUser(email, password);

        return NextResponse.json(embyUser, {
            headers: {
                'Access-Control-Allow-Origin': origin,
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
        });
    } catch (error: any) {
        console.error('Registration error:', error);
        return NextResponse.json(
            {
                error: 'Failed to create streaming account',
                details: error.message
            },
            {
                status: 500,
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                },
            }
        );
    }
}

export async function OPTIONS(request: Request) {
    return new NextResponse(null, {
        status: 204,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
    });
}


================================================================================
// File: app/api/auth/reset-password/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { auth } from "@/lib/firebase";
import { sendPasswordResetEmail } from "firebase/auth";

export async function POST(request: Request) {
  try {
    const { email } = await request.json();

    if (!email) {
      return NextResponse.json(
        { message: 'Email is required' },
        { status: 400 }
      );
    }

    const actionCodeSettings = {
      url: 'https://buzzplaymv.com/auth/action',
      handleCodeInApp: true
    };

    await sendPasswordResetEmail(auth, email, actionCodeSettings);

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('Password reset error:', error);
    return NextResponse.json(
      { message: error.message || 'Failed to send reset email' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/send-email/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { EmailService } from '@/lib/services/email';
import { NotificationType } from '@/lib/types/notification';

export async function POST(request: Request) {
  try {
    const { to, subject, text, html, type, data } = await request.json();

    // Validate request
    if (!to || (!type && (!subject || !text))) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // If template type is provided, use template
    let emailContent = { subject, text, html };
    if (type) {
      emailContent = EmailService.getSubscriptionTemplate(type as NotificationType, data);
    }

    // Send email
    const result = await EmailService.send(to, emailContent);

    return NextResponse.json({ 
      success: true, 
      messageId: result?.id 
    });
  } catch (error: any) {
    console.error('Error sending email:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to send email' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/api/test-notification/route.ts
================================================================================

import { NextResponse } from 'next/server';
import { NotificationService, NotificationTypes } from '@/lib/services/notification';
import type { NotificationType } from '@/lib/services/notification';

export async function POST(request: Request) {
  try {
    const { userId, type, data } = await request.json();

    if (!userId || !type) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Validate notification type
    const validTypes = Object.values(NotificationTypes);
    if (!validTypes.includes(type as NotificationType)) {
      return NextResponse.json(
        { error: 'Invalid notification type' },
        { status: 400 }
      );
    }

    await NotificationService.sendNotification(userId, type as NotificationType, data);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Test notification error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
} 


================================================================================
// File: app/pricing/page.tsx
================================================================================

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Check } from "lucide-react";
import { useAuthContext } from "@/components/auth-provider";
import { useRouter } from "next/navigation";
import { AnimatedEntrance } from "@/components/ui/animated-entrance";
import { motion } from "framer-motion";
import { plans } from "@/lib/config/plans";

export default function PricingPage() {
  const { user } = useAuthContext();
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  const [selectedDurations, setSelectedDurations] = useState({
    Mobile: 1,
    Basic: 1,
    Standard: 1,
    Premium: 1,
  });

  useEffect(() => {
    setMounted(true);
    setSelectedDurations({
      Mobile: 1,
      Basic: 1,
      Standard: 1,
      Premium: 1,
    });
  }, []);

  if (!mounted) {
    return (
      <div className="relative min-h-screen">
        {/* Modern gradient background */}
        <div className="absolute inset-0 -z-10 overflow-hidden">
          <div className="absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]" />
          <div className="absolute left-0 right-0 top-0 -z-10 m-auto h-[310px] w-[310px] rounded-full bg-primary/20 opacity-20 blur-[100px]" />
          <div className="absolute right-[-20%] top-[-10%] -z-10 h-[580px] w-[580px] rounded-full bg-primary/30 opacity-20 blur-[100px]" />
          <div className="absolute bottom-[-10%] left-[-20%] -z-10 h-[580px] w-[580px] rounded-full bg-primary/30 opacity-20 blur-[100px]" />
        </div>

        <div className="container relative py-8 px-4 md:py-16 md:px-8">
          <div className="text-center mb-8 md:mb-16">
            <div className="h-12 w-64 bg-gray-200 dark:bg-gray-800 rounded-lg mx-auto mb-4 animate-pulse" />
            <div className="h-6 w-96 bg-gray-200 dark:bg-gray-800 rounded-lg mx-auto animate-pulse" />
          </div>

          <div className="grid grid-cols-1 gap-6 md:grid-cols-3 md:gap-8 max-w-7xl mx-auto">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-[600px] bg-gray-200 dark:bg-gray-800 rounded-lg animate-pulse" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  const handleSubscribe = (planName: string) => {
    if (!user) {
      router.push("/register");
      return;
    }
    const duration = selectedDurations[planName as keyof typeof selectedDurations];
    router.push(`/checkout?plan=${planName.toLowerCase()}&duration=${duration}`);
  };

  const handleDurationChange = (planName: string, duration: number) => {
    setSelectedDurations((prev) => ({ ...prev, [planName]: duration }));
  };

  return (
    <div className="relative min-h-screen">
      {/* Modern gradient background */}
      <div className="absolute inset-0 -z-10 overflow-hidden">
        <div className="absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]" />
        <div className="absolute left-0 right-0 top-0 -z-10 m-auto h-[310px] w-[310px] rounded-full bg-primary/20 opacity-20 blur-[100px]" />
        <div className="absolute right-[-20%] top-[-10%] -z-10 h-[580px] w-[580px] rounded-full bg-primary/30 opacity-20 blur-[100px]" />
        <div className="absolute bottom-[-10%] left-[-20%] -z-10 h-[580px] w-[580px] rounded-full bg-primary/30 opacity-20 blur-[100px]" />
      </div>

      {/* Content */}
      <div className="container relative py-8 px-4 md:py-16 md:px-8">
        <AnimatedEntrance>
          <div className="text-center mb-8 md:mb-16">
            <h1 className="text-4xl md:text-6xl font-bold mb-4 font-display text-gray-900 dark:text-white">Choose Your Plan</h1>
            <p className="text-gray-700 dark:text-gray-300 max-w-2xl mx-auto text-base md:text-lg leading-relaxed">
              Select the perfect plan for your entertainment needs. All plans include access to our streaming platform and can be cancelled anytime.
            </p>
          </div>
        </AnimatedEntrance>

        <div className="grid grid-cols-1 gap-6 md:grid-cols-3 md:gap-8 max-w-7xl mx-auto">
          {plans.map((plan, index) => {
            const duration = selectedDurations[plan.name as keyof typeof selectedDurations] || 1;
            const monthlyPrice = duration === 1 ? plan.price : plan.specialOffers[duration as keyof typeof plan.specialOffers];
            const totalPrice = monthlyPrice * duration;

            return (
              <AnimatedEntrance key={plan.name} delay={index * 0.2}>
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  transition={{ type: "spring", stiffness: 400, damping: 10 }}
                  className="h-full"
                >
                  <Card className={`flex flex-col h-full border-2 min-h-[600px]  bg-background/60 ${
                    plan.name === "Basic" 
                      ? "border-primary shadow-lg relative bg-muted/50" 
                      : "hover:border-primary"
                    } transition-all`}>
                    {plan.name === "Basic" && (
                      <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                        <span className="bg-primary text-primary-foreground px-4 py-1 rounded-full text-sm font-medium">
                          Most Popular
                        </span>
                      </div>
                    )}
                    <CardHeader className="text-center pt-8 flex-none">
                      <CardTitle className="text-2xl md:text-3xl mb-2 font-semibold text-gray-900 dark:text-white">
                        {plan.name}
                        {plan.mobileOnly && (
                          <span className="block text-sm font-normal text-muted-foreground mt-1">
                            Mobile & Tablet Only
                          </span>
                        )}
                      </CardTitle>
                      <CardDescription className="text-base mb-4 text-gray-700 dark:text-gray-300">
                        {plan.description}
                      </CardDescription>
                      <div className="mb-4">
                        <div className="flex items-baseline justify-center">
                          <span className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white">MVR {totalPrice}</span>
                        </div>
                        <div className="mt-2 flex justify-center space-x-2">
                          {[1, 3, 6].map((option) => (
                            <button
                              key={option}
                              onClick={() => handleDurationChange(plan.name, option)}
                              className={`px-3 py-1 rounded transition-colors ${
                                duration === option 
                                  ? "bg-green-500 text-white"
                                  : "bg-gray-300 text-gray-900 dark:bg-gray-700 dark:text-white hover:bg-gray-400 dark:hover:bg-gray-600"
                              }`}
                            >
                              {option} Month{option > 1 ? "s" : ""}
                            </button>
                          ))}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <ul className="space-y-4 text-sm md:text-base text-gray-700 dark:text-gray-300">
                        {plan.features.map((feature) => (
                          <li key={feature} className="flex items-start">
                            <Check className="h-5 w-5 text-primary mr-3 mt-0.5 flex-shrink-0" />
                            <span>{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </CardContent>
                    <CardFooter className="pt-4 pb-8 flex-none">
                      <Button 
                        className="w-full h-12 text-base"
                        onClick={() => handleSubscribe(plan.name)}
                        variant={plan.name === "Basic" ? "default" : "outline"}
                        size="lg"
                      >
                        {user ? "Subscribe Now" : "Get Started"}
                      </Button>
                    </CardFooter>
                  </Card>
                </motion.div>
              </AnimatedEntrance>
            );
          })}
        </div>
      </div>
    </div>
  );
}


================================================================================
// File: app/globals.css
================================================================================

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 150 100% 50%;
    --primary-foreground: 0 0% 0%;
 
    --secondary: 51 100% 50%;
    --secondary-foreground: 0 0% 0%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
 
    --primary: 150 100% 50%;
    --primary-foreground: 0 0% 0%;
 
    --secondary: 51 100% 50%;
    --secondary-foreground: 0 0% 0%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.honeycomb-pattern {
  background-color: #f7c52b;
  opacity: 0.8;
  background-image:  linear-gradient(30deg, #000000 12%, transparent 12.5%, transparent 87%, #000000 87.5%, #000000), 
  linear-gradient(150deg, #000000 12%, transparent 12.5%, transparent 87%, #000000 87.5%, #000000), 
  linear-gradient(30deg, #000000 12%, transparent 12.5%, transparent 87%, #000000 87.5%, #000000), 
  linear-gradient(150deg, #000000 12%, transparent 12.5%, transparent 87%, #000000 87.5%, #000000), 
  linear-gradient(60deg, #00000077 25%, transparent 25.5%, transparent 75%, #00000077 75%, #00000077), 
  linear-gradient(60deg, #00000077 25%, transparent 25.5%, transparent 75%, #00000077 75%, #00000077);
  background-size: 80px 140px;
  background-position: 0 0, 0 0, 40px 70px, 40px 70px, 0 0, 40px 70px;
}

@font-face {
  font-family: 'SequelSansBlack';
  src: url('/fonts/sequel-sans-black-head.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

/* Add these styles */
.gradient-text {
  position: relative;
  overflow: visible;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.gradient-text .main-text {
  position: relative;
  z-index: 10;
  cursor: pointer;
  color: #10b981;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  transform: scale(1.2);
  transition: transform 0.3s ease;
}

/* Responsive scaling */
@media (min-width: 768px) {
  .gradient-text .main-text {
    transform: scale(1.3);
  }
}

@media (min-width: 1024px) {
  .gradient-text .main-text {
    transform: scale(1.4);
  }
}

@media (min-width: 1280px) {
  .gradient-text .main-text {
    transform: scale(1.5);
  }
}

.gradient-text .top-1,
.gradient-text .top-2,
.gradient-text .top-3 {
  opacity: 0;
  position: absolute;
  color: #10b981;
  text-shadow: 0px 1px 14px rgba(16, 185, 129, 0.2);
}

.gradient-text .bottom-1,
.gradient-text .bottom-2,
.gradient-text .bottom-3 {
  opacity: 0;
  position: absolute;
  color: #10b981;
  text-shadow: 0px 1px 4px rgba(16, 185, 129, 0.2);
}

/* Button animation styles */
.button-content {
  position: relative;
  z-index: 1;
}

button:hover::before,
.button:hover::before {
  transform: translateX(100%);
}

button:active,
.button:active {
  transform: translateY(2px);
}

.liquid-button {
  position: relative;
  z-index: 1;
  color: white;
  font-weight: 700;
  letter-spacing: 0.05em;
  text-transform: uppercase;
}

.liquid-button canvas {
  position: absolute;
  top: -50px;
  right: -50px;
  bottom: -50px;
  left: -50px;
  z-index: 1;
}

.liquid-button .inner {
  position: relative;
  z-index: 2;
}

/* Hamburger Menu Styles */
.hamburger {
  display: inline-block;
  padding: 0;
  background: transparent;
  border: 0;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
}

.hamburger:before,
.hamburger:after {
  content: "";
}

.hamburger:before,
.hamburger .icon,
.hamburger:after {
  display: block;
  width: 100%;
  height: 2px;
  margin: 0 0 6px;
  border-radius: 11px;
  background: #fff;
  transition: all 0.3s ease-in-out;
}

.hamburger.active:before,
.hamburger.active .icon,
.hamburger.active:after {
  background: #e0e0e0;
}

.hamburger.hamburger-cancel.active .icon {
  transform: scale(0);
}

.hamburger.hamburger-cancel.active:before {
  transform: translateY(8px) rotate(135deg);
}

.hamburger.hamburger-cancel.active:after {
  margin-bottom: 0;
  transform: translateY(-8px) rotate(-135deg);
}

/* Reset hamburger when menu closes */
.hamburger:not(.active):before,
.hamburger:not(.active) .icon,
.hamburger:not(.active):after {
  transform: none;
  background: #fff;
  margin-bottom: 6px;
}

/* Menu Animation Styles */
@keyframes slideIn {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

@layer utilities {
  .starry-bg {
    background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
  }

  .animate-gradient {
    background-size: 200% 200%;
    animation: gradient 10s ease infinite;
  }

  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
}


@font-face {
  font-family: 'Baeno';
  src: url('/fonts/baeno.otf') format('opentype');
  font-weight: normal;
  font-style: normal;
}

.neon {
  color: #fff;
  font-family: 'baeno';
  letter-spacing: 0.1em;
  color: cyan;
  text-shadow:
    0 0 5px #fff,
    0 0 10px #fff,
   
    0 0 40px #0ff,
    
   
    
    0 0 150px #0ff;
}


================================================================================
// File: app/sitemap.ts
================================================================================

import { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://BuzzPlay.com',
      lastModified: new Date(),
      changeFrequency: 'daily',
      priority: 1,
    },
    {
      url: 'https://BuzzPlay.com/pricing',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.8,
    },
    {
      url: 'https://BuzzPlay.com/login',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.5,
    },
    {
      url: 'https://BuzzPlay.com/register',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.5,
    },
  ]
} 


================================================================================
// File: app/login/page.tsx
================================================================================

"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import { Film, Loader2 } from "lucide-react";
import { useAuthContext } from "@/components/auth-provider";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const { toast } = useToast();
  const { user } = useAuthContext();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (user?.emailVerified) {
      router.push("/dashboard");
    }
  }, [user, router]);

  useEffect(() => {
    const verified = searchParams.get("verified");
    if (verified === "true") {
      toast({
        title: "Email Verified",
        description: "Your email has been verified. You can now log in.",
      });
    }
  }, [searchParams, toast]);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      
      if (!userCredential.user.emailVerified) {
        // Sign out the user immediately if email is not verified
        await auth.signOut();
        
        toast({
          variant: "destructive",
          title: "Email not verified",
          description: "Please verify your email before logging in.",
        });
        router.push("/auth/verification-sent");
        return;
      }

      router.push("/dashboard");
      toast({
        title: "Welcome back!",
        description: "You've successfully logged in.",
      });
    } catch (error: any) {
      console.error('Login error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message === 'Firebase: Error (auth/invalid-credential).' 
          ? "Invalid email or password"
          : error.message,
      });
    } finally {
      setLoading(false);
    }
  };

  if (user?.emailVerified) {
    return null;
  }

  return (
    <div className="container flex items-center justify-center min-h-[calc(100vh-3.5rem)]">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <Film className="h-12 w-12 text-primary animate-pulse" />
          </div>
          <CardTitle className="text-2xl text-center">
            Welcome back
          </CardTitle>
          <CardDescription className="text-center">
            Enter your email to sign in to your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
              />
              <div className="text-sm text-right">
                <Link 
                  href="/reset-password" 
                  className="text-primary hover:text-primary/80 transition-colors"
                >
                  Forgot password?
                </Link>
              </div>
            </div>
            <Button 
              className="w-full" 
              type="submit" 
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Signing in...
                </>
              ) : (
                "Sign in"
              )}
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Don&apos;t have an account?{" "}
            <Link href="/register" className="text-primary hover:text-primary/80 transition-colors">
              Sign up
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================================================
// File: app/reset-password/page.tsx
================================================================================

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import { Film, Loader2 } from "lucide-react";
import axios from "axios";

export default function ResetPasswordPage() {
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      await axios.post('/api/auth/reset-password', { 
        email: email.trim() 
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      toast({
        title: "Reset email sent",
        description: "Check your email for password reset instructions.",
      });
      
      setEmail(""); // Clear the input after success
    } catch (error: any) {
      console.error('Reset password error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.message || "Failed to send reset email",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container flex items-center justify-center min-h-[calc(100vh-3.5rem)]">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <Film className="h-12 w-12 text-primary" />
          </div>
          <CardTitle className="text-2xl text-center">Reset Password</CardTitle>
          <CardDescription className="text-center">
            Enter your email to receive password reset instructions
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleResetPassword} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <Button className="w-full" type="submit" disabled={loading}>
              {loading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                "Send Reset Link"
              )}
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Remember your password?{" "}
            <Link href="/login" className="text-primary hover:underline">
              Sign in
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================================================
// File: package.json
================================================================================

{
  "name": "buzzplay",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "export": "next export",
    "start": "next start",
    "lint": "next lint --dir src",
    "security-check": "npm audit",
    "analyze": "ANALYZE=true next build"
  },
  "dependencies": {
    "@firebasegen/default-connector": "file:dataconnect-generated/js/default-connector",
    "@fortawesome/free-brands-svg-icons": "^6.6.0",
    "@fortawesome/free-regular-svg-icons": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@upstash/redis": "^1.34.3",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "^1.0.3",
    "date-fns": "^3.3.1",
    "embla-carousel-react": "^8.3.1",
    "firebase": "^10.14.1",
    "firebase-admin": "^12.7.0",
    "form-data": "^4.0.1",
    "framer-motion": "^11.11.11",
    "gsap": "^3.12.5",
    "helmet": "^7.1.0",
    "input-otp": "^1.4.0",
    "isomorphic-dompurify": "^1.13.0",
    "jest": "^29.7.0",
    "lucide-react": "^0.358.0",
    "mailgun-js": "^0.22.0",
    "mailgun.js": "^10.2.3",
    "next": "^15.0.2",
    "next-auth": "^4.24.7",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-day-picker": "^9.2.1",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.1",
    "react-resizable-panels": "^2.1.6",
    "recharts": "^2.13.3",
    "resend": "^4.0.1",
    "sanitize-html": "^2.13.1",
    "sonner": "^1.6.1",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@babel/plugin-proposal-private-methods": "^7.18.6",
    "@babel/preset-env": "^7.24.0",
    "@types/jest": "^29.5.14",
    "@types/json-schema": "^7.0.15",
    "@types/node": "^20.11.25",
    "@types/react": "^18.2.64",
    "@types/react-dom": "^18.2.21",
    "autoprefixer": "^10.4.18",
    "babel-loader": "^9.1.3",
    "eslint": "^8.57.0",
    "eslint-config-next": "13.5.6",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.4.2"
  }
}



================================================================================
// File: next.config.js
================================================================================

/** @type {import('next').NextConfig} */
const nextConfig = {
  env: {
    NEXT_PUBLIC_EMBY_URL: process.env.NEXT_PUBLIC_EMBY_URL,
    NEXT_PUBLIC_EMBY_API_KEY: process.env.NEXT_PUBLIC_EMBY_API_KEY,
    RESEND_API_KEY: process.env.RESEND_API_KEY,
    EMAIL_FROM: process.env.EMAIL_FROM || 'noreply@buzzplaymv.com',
  },
  images: {
    domains: ['167.172.75.130', 'image.tmdb.org'],
    formats: ['image/avif', 'image/webp'],
    minimumCacheTTL: 60,
  },
  poweredByHeader: false,
  compress: true,
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains'
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin'
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()'
          },
          {
            key: 'X-Robots-Tag',
            value: 'index, follow'
          },
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable'
          }
        ]
      }
    ];
  },
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: false,
      };
    }

    config.optimization = {
      ...config.optimization,
      usedExports: false,
    };

    return config;
  },
  i18n: {
    locales: ['en'],
    defaultLocale: 'en',
  },
};

module.exports = nextConfig;


================================================================================
// File: .bolt/config.json
================================================================================

{
  "template": "nextjs-shadcn"
}



================================================================================
// File: hooks/use-auth.ts
================================================================================

"use client";

import { useEffect, useState } from "react";
import { User, onAuthStateChanged } from "firebase/auth";
import { auth } from "@/lib/firebase";

export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  return { user, loading };
}


================================================================================
// File: hooks/use-toast.ts
================================================================================

'use client';

// Inspired by react-hot-toast library
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };



================================================================================
// File: components/site-header.tsx
================================================================================

"use client";

import * as React from "react";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { AnimatedMobileNav } from "@/components/ui/animated-mobile-nav";


import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { useAuthContext } from "@/components/auth-provider";
import { Film, Menu, CreditCard, LayoutDashboard, LogIn, UserPlus, LogOut } from "lucide-react";

import { AnimatedEntrance } from "@/components/ui/animated-entrance";
import { signOut } from "firebase/auth";
import { auth } from "@/lib/firebase";
import Image from 'next/image';

const MainNav = () => {
  const pathname = usePathname();
  
  return (
    <NavigationMenu className="hidden md:flex ml-auto mr-4">
      <NavigationMenuList>
        <NavigationMenuItem>
          <Link href="/pricing" legacyBehavior passHref>
            <NavigationMenuLink className={navigationMenuTriggerStyle()}>
              Pricing
            </NavigationMenuLink>
          </Link>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
};

const MobileNav = () => {
  const { user } = useAuthContext();
  const [open, setOpen] = React.useState(false);
  
  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="md:hidden">
          <Menu className="h-5 w-5" />
          <span className="sr-only">Open menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent 
        side="left" 
        className="w-[80vw] sm:w-[300px] p-0"
      >
        <SheetHeader className="sr-only">
          <SheetTitle>Navigation Menu</SheetTitle>
          <SheetDescription>
            Access site navigation and user options
          </SheetDescription>
        </SheetHeader>

        <div className="flex flex-col h-full">
          <div className="p-4 sm:p-6 flex justify-center border-b">
            <Link 
              href="/" 
              className="flex items-center gap-2"
              onClick={() => setOpen(false)}
            >
              <Film className="h-6 w-6 sm:h-8 sm:w-8 text-yellow-500" />
              <span className="font-bold text-xl sm:text-2xl">BuzzPlay</span>
            </Link>
          </div>

          <nav className="flex-1 overflow-y-auto p-3 sm:p-4" aria-label="Main navigation">
            <div className="space-y-1 sm:space-y-2">
              <Link 
                href="/pricing" 
                className="flex items-center gap-2 sm:gap-3 px-2 sm:px-3 py-2 text-sm rounded-lg hover:bg-accent transition-colors"
                onClick={() => setOpen(false)}
              >
                <CreditCard className="h-4 w-4" />
                <span>Pricing</span>
              </Link>

              {user ? (
                <Link 
                  href="/dashboard" 
                  className="flex items-center gap-3 px-3 py-2 text-sm rounded-lg hover:bg-accent transition-colors"
                  onClick={() => setOpen(false)}
                >
                  <LayoutDashboard className="h-4 w-4" />
                  <span>Dashboard</span>
                </Link>
              ) : (
                <>
                  <Link 
                    href="/login" 
                    className="flex items-center gap-3 px-3 py-2 text-sm rounded-lg hover:bg-accent transition-colors"
                    onClick={() => setOpen(false)}
                  >
                    <LogIn className="h-4 w-4" />
                    <span>Login</span>
                  </Link>
                  <Link 
                    href="/register" 
                    className="flex items-center gap-3 px-3 py-2 text-sm rounded-lg hover:bg-accent transition-colors"
                    onClick={() => setOpen(false)}
                  >
                    <UserPlus className="h-4 w-4" />
                    <span>Get Started</span>
                  </Link>
                </>
              )}
            </div>
          </nav>

          <div className="p-3 sm:p-4 border-t">
            <p className="text-xs text-center text-muted-foreground">
              © {new Date().getFullYear()} BuzzPlay. All rights reserved.
            </p>
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
};

export function SiteHeader() {
  const { user } = useAuthContext();
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      router.push("/");
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  return (
    <motion.header
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ type: "spring", stiffness: 100, damping: 20 }}
      className="sticky top-0 z-50 w-full backdrop-blur-sm"
    >
      <div className="container flex h-16 items-center">
        <AnimatedMobileNav user={user} handleSignOut={handleSignOut} />
        <motion.div
          whileHover={{ scale: 1.05 }}
          transition={{ type: "spring", stiffness: 400, damping: 10 }}
        >
          <Link href="/" className="flex items-center space-x-2 sm:space-x-3 ml-2 md:ml-0">
            <Image 
              src="/images/logo.svg"
              alt="BuzzPlay Logo"
              width={64}
              height={64}
              className="h-10 w-10 sm:h-12 sm:w-12 md:h-16 md:w-16"
            />
            <span 
              className="font-bold text-2xl sm:text-3xl md:text-5xl" 
              style={{ fontFamily: 'SequelSansBlack' }}
            >
              <span className="text-black dark:text-white">Buzz</span>
              <span className="text-cyan">Play</span>
            </span>
          </Link>
        </motion.div>
        
        <div className="flex items-center ml-auto">
          <nav className="hidden md:flex items-center space-x-6">
            <Link href="/pricing" className="text-sm font-medium text-muted-foreground hover:text-cyan">
              Pricing
            </Link>
            <Link href="/faq" className="text-sm font-medium text-muted-foreground hover:text-cyan">
              FAQ
            </Link>
            {user ? (
              <>
                <Button 
                  variant="ghost" 
                  className="flex items-center gap-2 text-sm font-medium text-muted-foreground hover:text-cyan"
                  asChild
                >
                  <Link href="/dashboard">
                    <LayoutDashboard className="h-4 w-4" />
                    Dashboard
                  </Link>
                </Button>
                <button
                  onClick={handleSignOut}
                  className="text-sm font-medium text-muted-foreground hover:text-cyan flex items-center gap-2"
                >
                  <LogOut className="h-4 w-4" />
                  Sign out
                </button>
              </>
            ) : (
              <>
                <Link href="/login" className="text-sm font-medium text-muted-foreground hover:text-cyan">
                  Login
                </Link>
                <Button asChild className="bg-emerald-500 hover:bg-emerald-600">
                  <Link href="/register">Get Started</Link>
                </Button>
              </>
            )}
          </nav>
        </div>
      </div>
    </motion.header>
  );
}


================================================================================
// File: components/theme-provider.tsx
================================================================================

"use client";

import { createContext, useContext, useEffect, useState } from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [mounted, setMounted] = useState(false);

  // Only render after first client-side render to avoid hydration mismatch
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null; // or a loading placeholder that matches your dark/light theme
  }

  return (
    <NextThemesProvider
      attribute="class"
      defaultTheme="dark"
      enableSystem={true}
      disableTransitionOnChange
    >
      {children}
    </NextThemesProvider>
  );
}


================================================================================
// File: components/error-boundary.tsx
================================================================================

"use client";

import { Component, ErrorInfo, ReactNode } from 'react';
import { Button } from '@/components/ui/button';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <h2 className="text-2xl font-bold mb-4">Something went wrong</h2>
          <Button
            onClick={() => this.setState({ hasError: false })}
            className="mb-4"
          >
            Try again
          </Button>
          <Button
            variant="outline"
            onClick={() => window.location.href = '/'}
          >
            Go to Home
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
} 


================================================================================
// File: components/EmberBackground.tsx
================================================================================

"use client";

import { useEffect, useRef } from 'react';

export function EmberBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const updateCanvasSize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    updateCanvasSize();

    const emberSettings = {
      maxSize: 4,
      minSize: 1,
      maxSpeed: 7,
      minSpeed: 0.5,
      color: 'rgba(255, 69, 0, 0.7)' as const,
    };

    class Ember {
      x!: number;
      y!: number;
      size!: number;
      speed!: number;
      opacity!: number;
      fadeRate!: number;
      color!: string;

      constructor() {
        this.reset();
      }

      reset() {
        if (!canvas) return;
        
        this.x = Math.random() * canvas.width;
        this.y = canvas.height + Math.random() * 100;
        this.size = emberSettings.minSize + Math.random() * (emberSettings.maxSize - emberSettings.minSize);
        this.speed = emberSettings.minSpeed + Math.random() * (emberSettings.maxSpeed - emberSettings.minSpeed);
        this.opacity = 1;
        this.fadeRate = Math.random() * 0.02 + 0.005;
        this.color = emberSettings.color;
      }

      update() {
        this.y -= this.speed;
        this.opacity -= this.fadeRate;
        if (this.opacity <= 0) {
          this.reset();
        }
      }

      draw() {
        if (!ctx) return;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color.replace('0.7', this.opacity.toFixed(2));
        ctx.fill();
      }
    }

    const embers: Ember[] = Array.from({ length: 200 }, () => new Ember());

    window.addEventListener('resize', updateCanvasSize);

    function animate() {
      if (!ctx || !canvas) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      embers.forEach(ember => {
        ember.update();
        ember.draw();
      });

      requestAnimationFrame(animate);
    }

    animate();

    return () => {
      window.removeEventListener('resize', updateCanvasSize);
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 -z-10"
      style={{ backgroundColor: '#111' }}
    />
  );
} 


================================================================================
// File: components/ui/popover.tsx
================================================================================

'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };



================================================================================
// File: components/ui/navigation-menu.tsx
================================================================================

"use client";

import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  navigationMenuTriggerStyle,
};


================================================================================
// File: components/ui/button.tsx
================================================================================

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'relative inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 overflow-hidden',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90 before:absolute before:inset-0 before:z-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-white/10 before:to-transparent before:transition-transform hover:before:translate-x-[100%] active:translate-y-0.5',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 before:absolute before:inset-0 before:z-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-white/10 before:to-transparent before:transition-transform hover:before:translate-x-[100%] active:translate-y-0.5',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground before:absolute before:inset-0 before:z-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-white/10 before:to-transparent before:transition-transform hover:before:translate-x-[100%] active:translate-y-0.5',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80 before:absolute before:inset-0 before:z-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-white/10 before:to-transparent before:transition-transform hover:before:translate-x-[100%] active:translate-y-0.5',
        ghost: 'hover:bg-accent hover:text-accent-foreground before:absolute before:inset-0 before:z-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-white/10 before:to-transparent before:transition-transform hover:before:translate-x-[100%] active:translate-y-0.5',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };



================================================================================
// File: components/ui/sheet.tsx
================================================================================

'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};



================================================================================
// File: components/ui/carousel.tsx
================================================================================

'use client';

import * as React from 'react';
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: 'horizontal' | 'vertical';
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />');
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y',
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on('reInit', onSelect);
      api.on('select', onSelect);

      return () => {
        api?.off('select', onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = 'Carousel';

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = 'CarouselContent';

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = 'CarouselItem';

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute  h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = 'CarouselPrevious';

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = 'CarouselNext';

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================================================
// File: components/ui/alert-dialog.tsx
================================================================================

'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = 'AlertDialogHeader';

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = 'AlertDialogFooter';

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: 'outline' }),
      'mt-2 sm:mt-0',
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};



================================================================================
// File: components/ui/slider.tsx
================================================================================

'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/lib/utils';

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };



================================================================================
// File: components/ui/resizable.tsx
================================================================================

'use client';

import { GripVertical } from 'lucide-react';
import * as ResizablePrimitive from 'react-resizable-panels';

import { cn } from '@/lib/utils';

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90',
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================================================
// File: components/ui/toast.tsx
================================================================================

'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};



================================================================================
// File: components/ui/tabs.tsx
================================================================================

'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';

import { cn } from '@/lib/utils';

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };



================================================================================
// File: components/ui/form.tsx
================================================================================

'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};



================================================================================
// File: components/ui/drawer.tsx
================================================================================

'use client';

import * as React from 'react';
import { Drawer as DrawerPrimitive } from 'vaul';

import { cn } from '@/lib/utils';

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = 'Drawer';

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn('fixed inset-0 z-50 bg-black/80', className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = 'DrawerContent';

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}
    {...props}
  />
);
DrawerHeader.displayName = 'DrawerHeader';

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('mt-auto flex flex-col gap-2 p-4', className)}
    {...props}
  />
);
DrawerFooter.displayName = 'DrawerFooter';

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};



================================================================================
// File: components/ui/dropdown-menu.tsx
================================================================================

'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};



================================================================================
// File: components/ui/footer.tsx
================================================================================

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faInstagram, faTiktok, faTelegram} from '@fortawesome/free-brands-svg-icons'
import Link from "next/link";

export function Footer() {
  return (
    <footer className="border-t py-4 md:py-0">
      <div className="container flex flex-col items-center gap-3 md:h-16 md:flex-row md:justify-between">
        <div className="flex items-center gap-4">
          <Link href="https://t.me/BuzzPlayMV" target="_blank" rel="noopener noreferrer">
            <FontAwesomeIcon icon={faTelegram} className="h-6 w-6 hover:text-primary transition-colors" />  
          </Link>
          <Link href="https://tiktok.com/@BuzzPlayMV" target="_blank" rel="noopener noreferrer">
            <FontAwesomeIcon icon={faTiktok} className="h-6 w-6 hover:text-primary transition-colors" />
          </Link>
          <Link href="https://instagram.com/BuzzPlayMV" target="_blank" rel="noopener noreferrer">
            <FontAwesomeIcon icon={faInstagram} className="h-6 w-6 hover:text-primary transition-colors" />
          </Link>
        </div>
        <p className="text-sm text-muted-foreground">
          © {new Date().getFullYear()} BuzzPlay. All rights reserved.
        </p>
      </div>
    </footer>
  );
} 


================================================================================
// File: components/ui/label.tsx
================================================================================

'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================================================
// File: components/ui/chart.tsx
================================================================================

'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >['children'];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = 'Chart';

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: 'line' | 'dot' | 'dashed';
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || 'value'}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot';

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = 'ChartTooltip';

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center justify-center gap-4',
          verticalAlign === 'top' ? 'pb-3' : 'pt-3',
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = 'ChartLegend';

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};



================================================================================
// File: components/ui/radio-group.tsx
================================================================================

'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-2', className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };



================================================================================
// File: components/ui/toaster.tsx
================================================================================

'use client';

import { useToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}



================================================================================
// File: components/ui/input-otp.tsx
================================================================================

'use client';

import * as React from 'react';
import { OTPInput, OTPInputContext } from 'input-otp';
import { Dot } from 'lucide-react';

import { cn } from '@/lib/utils';

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      'flex items-center gap-2 has-[:disabled]:opacity-50',
      containerClassName
    )}
    className={cn('disabled:cursor-not-allowed', className)}
    {...props}
  />
));
InputOTP.displayName = 'InputOTP';

const InputOTPGroup = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center', className)} {...props} />
));
InputOTPGroup.displayName = 'InputOTPGroup';

const InputOTPSlot = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',
        isActive && 'z-10 ring-2 ring-ring ring-offset-background',
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = 'InputOTPSlot';

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = 'InputOTPSeparator';

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };



================================================================================
// File: components/ui/animated-entrance.tsx
================================================================================

import { motion } from "framer-motion";
import { cn } from "@/lib/utils";

interface AnimatedEntranceProps {
  children: React.ReactNode;
  className?: string;
  delay?: number;
}

export function AnimatedEntrance({ 
  children, 
  className,
  delay = 0 
}: AnimatedEntranceProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{
        duration: 0.5,
        delay,
        ease: [0.4, 0, 0.2, 1]
      }}
      className={cn(className)}
    >
      {children}
    </motion.div>
  );
} 


================================================================================
// File: components/ui/table.tsx
================================================================================

import * as React from 'react';

import { cn } from '@/lib/utils';

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn('w-full caption-bottom text-sm', className)}
      {...props}
    />
  </div>
));
Table.displayName = 'Table';

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
));
TableHeader.displayName = 'TableHeader';

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn('[&_tr:last-child]:border-0', className)}
    {...props}
  />
));
TableBody.displayName = 'TableBody';

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',
      className
    )}
    {...props}
  />
));
TableFooter.displayName = 'TableFooter';

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
));
TableRow.displayName = 'TableRow';

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
));
TableHead.displayName = 'TableHead';

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
));
TableCell.displayName = 'TableCell';

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
));
TableCaption.displayName = 'TableCaption';

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};



================================================================================
// File: components/ui/card.tsx
================================================================================

import * as React from 'react';

import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================================================
// File: components/ui/dialog.tsx
================================================================================

'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================================================
// File: components/ui/context-menu.tsx
================================================================================

'use client';

import * as React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold text-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border', className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = 'ContextMenuShortcut';

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};



================================================================================
// File: components/ui/scroll-area.tsx
================================================================================

'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn('relative overflow-hidden', className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex touch-none select-none transition-colors',
      orientation === 'vertical' &&
        'h-full w-2.5 border-l border-l-transparent p-[1px]',
      orientation === 'horizontal' &&
        'h-2.5 flex-col border-t border-t-transparent p-[1px]',
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };



================================================================================
// File: components/ui/command.tsx
================================================================================

'use client';

import * as React from 'react';
import { type DialogProps } from '@radix-ui/react-dialog';
import { Command as CommandPrimitive } from 'cmdk';
import { Search } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Dialog, DialogContent } from '@/components/ui/dialog';

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = 'CommandShortcut';

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};



================================================================================
// File: components/ui/menubar.tsx
================================================================================

'use client';

import * as React from 'react';
import * as MenubarPrimitive from '@radix-ui/react-menubar';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = 'MenubarShortcut';

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};



================================================================================
// File: components/ui/toggle.tsx
================================================================================

'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-3',
        sm: 'h-9 px-2.5',
        lg: 'h-11 px-5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };



================================================================================
// File: components/ui/select.tsx
================================================================================

'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================================================
// File: components/ui/accordion.tsx
================================================================================

'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn('border-b', className)}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn('pb-4 pt-0', className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================================================
// File: components/ui/textarea.tsx
================================================================================

import * as React from 'react';

import { cn } from '@/lib/utils';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export { Textarea };



================================================================================
// File: components/ui/toggle-group.tsx
================================================================================

'use client';

import * as React from 'react';
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';
import { type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { toggleVariants } from '@/components/ui/toggle';

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: 'default',
  variant: 'default',
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn('flex items-center justify-center gap-1', className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };



================================================================================
// File: components/ui/pagination.tsx
================================================================================

import * as React from 'react';
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';
import { ButtonProps, buttonVariants } from '@/components/ui/button';

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
);
Pagination.displayName = 'Pagination';

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<'ul'>
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn('flex flex-row items-center gap-1', className)}
    {...props}
  />
));
PaginationContent.displayName = 'PaginationContent';

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<'li'>
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn('', className)} {...props} />
));
PaginationItem.displayName = 'PaginationItem';

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<'a'>;

const PaginationLink = ({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = 'PaginationLink';

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn('gap-1 pl-2.5', className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = 'PaginationPrevious';

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn('gap-1 pr-2.5', className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = 'PaginationNext';

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    aria-hidden
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = 'PaginationEllipsis';

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};



================================================================================
// File: components/ui/badge.tsx
================================================================================

import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };



================================================================================
// File: components/ui/animated-mobile-nav.tsx
================================================================================

"use client";

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { LogOut, LayoutDashboard } from "lucide-react";

interface AnimatedMobileNavProps {
  user?: any;
  handleSignOut?: () => void;
}

export function AnimatedMobileNav({ user, handleSignOut }: AnimatedMobileNavProps) {
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();

  const toggleMenu = () => {
    setIsOpen(!isOpen);
    document.body.style.overflow = isOpen ? 'auto' : 'hidden';
  };

  const handleNavigation = (href: string) => {
    setIsOpen(false);
    document.body.style.overflow = 'auto';
    router.push(href);
  };

  const handleSignOutClick = () => {
    if (handleSignOut) {
      handleSignOut();
      setIsOpen(false);
      document.body.style.overflow = 'auto';
    }
  };

  return (
    <>
      <button
        onClick={toggleMenu}
        className={cn(
          "fixed top-4 right-4 md:hidden hamburger hamburger-cancel z-[100] w-6 h-6",
          isOpen && "active"
        )}
        aria-label="Toggle menu"
      >
        <span className="icon" />
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div 
            className="fixed inset-0 min-h-[100dvh] w-full z-[90] bg-transparent"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {/* Background Layers */}
            {['top', 'mid', 'bot'].map((layer, index) => (
              <motion.div
                key={layer}
                className="absolute inset-0 w-[150vw] h-[150vh] -left-[25vw] -top-[25vh] bg-white/95 dark:bg-gray-900/95"
                initial={{ height: "0%", top: "50%" }}
                animate={{ height: "150%", top: `${-20 + (index * 50)}%` }}
                exit={{ height: "0%", top: "50%" }}
                transition={{
                  duration: 0.7,
                  ease: [0.22, 1, 0.36, 1],
                  delay: index * 0.1
                }}
                style={{
                  transform: "rotate(37deg)",
                  transformOrigin: "center",
                  marginTop: "64px",
                }}
              />
            ))}

            {/* Navigation Links */}
            <motion.div
              className="fixed inset-0 flex items-center justify-center z-[95] min-h-[100dvh] mt-16"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              transition={{ delay: 0.3 }}
            >
              <ul className="flex flex-col items-center justify-center space-y-8">
                {user && (
                  <motion.li
                    className="text-2xl font-medium text-black dark:text-white cursor-pointer"
                    whileHover={{ scale: 1.1 }}
                    onClick={() => handleNavigation('/dashboard')}
                  >
                    <span className="flex items-center gap-2">
                      <LayoutDashboard className="h-6 w-6" />
                      Dashboard
                    </span>
                  </motion.li>
                )}

                <motion.li
                  className="text-2xl font-medium text-black dark:text-white cursor-pointer"
                  whileHover={{ scale: 1.1 }}
                  onClick={() => handleNavigation('/pricing')}
                >
                  Pricing
                </motion.li>
                
                <motion.li
                  className="text-2xl font-medium text-black dark:text-white cursor-pointer"
                  whileHover={{ scale: 1.1 }}
                  onClick={() => handleNavigation('/faq')}
                >
                  FAQ
                </motion.li>

                {user ? (
                  <motion.li
                    className="text-2xl font-medium text-black dark:text-white cursor-pointer"
                    whileHover={{ scale: 1.1 }}
                    onClick={handleSignOutClick}
                  >
                    <span className="flex items-center gap-2">
                      <LogOut className="h-6 w-6" />
                      Sign out
                    </span>
                  </motion.li>
                ) : (
                  <>
                    <motion.li
                      className="text-2xl font-medium text-black dark:text-white cursor-pointer"
                      whileHover={{ scale: 1.1 }}
                      onClick={() => handleNavigation('/login')}
                    >
                      Login
                    </motion.li>
                    
                    <motion.li
                      className="text-2xl font-medium"
                      whileHover={{ scale: 1.1 }}
                    >
                      <button
                        onClick={() => handleNavigation('/register')}
                        className="px-8 py-3 bg-emerald-500 hover:bg-emerald-600 text-white rounded-md"
                      >
                        Get Started
                      </button>
                    </motion.li>
                  </>
                )}
              </ul>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}


================================================================================
// File: components/ui/checkbox.tsx
================================================================================

'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };



================================================================================
// File: components/ui/hover-card.tsx
================================================================================

'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/utils';

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      'z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };



================================================================================
// File: components/ui/aspect-ratio.tsx
================================================================================

'use client';

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };



================================================================================
// File: components/ui/avatar.tsx
================================================================================

'use client';

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================================================
// File: components/ui/separator.tsx
================================================================================

'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };



================================================================================
// File: components/ui/tooltip.tsx
================================================================================

'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================================================
// File: components/ui/animated-button.tsx
================================================================================

"use client";

import * as React from "react";
import { cn } from "@/lib/utils";
import { Button, ButtonProps } from "./button";

export interface AnimatedButtonProps extends ButtonProps {
  children: React.ReactNode;
}

export function AnimatedButton({ className, children, ...props }: AnimatedButtonProps) {
  return (
    <Button
      className={cn(
        "relative overflow-hidden transition-all duration-300",
        "after:absolute after:inset-0 after:z-[-1] after:opacity-0 after:transition-all",
        "after:bg-gradient-to-r after:from-white/10 after:to-white/5",
        "after:shadow-[inset_-7px_-7px_20px_0px_rgba(255,255,255,0.6),inset_-4px_-4px_5px_0px_rgba(255,255,255,0.6),inset_7px_7px_20px_0px_rgba(0,0,0,0.1),inset_4px_4px_5px_0px_rgba(0,0,0,0.05)]",
        "hover:after:opacity-100 hover:after:translate-x-full",
        "active:translate-y-0.5",
        className
      )}
      {...props}
    >
      {children}
    </Button>
  );
} 


================================================================================
// File: components/ui/calendar.tsx
================================================================================

'use client';

import * as React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { DayPicker } from 'react-day-picker';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell:
          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',
        row: 'flex w-full mt-2',
        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'
        ),
        day_range_end: 'day-range-end',
        day_selected:
          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',
        day_today: 'bg-accent text-accent-foreground',
        day_outside:
          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',
        day_disabled: 'text-muted-foreground opacity-50',
        day_range_middle:
          'aria-selected:bg-accent aria-selected:text-accent-foreground',
        day_hidden: 'invisible',
        ...classNames,
      }}
      {...props}
    />
  );
}
Calendar.displayName = 'Calendar';

export { Calendar };



================================================================================
// File: components/ui/collapsible.tsx
================================================================================

'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };



================================================================================
// File: components/ui/input.tsx
================================================================================

import * as React from 'react';

import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };



================================================================================
// File: components/ui/switch.tsx
================================================================================

'use client';

import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';

import { cn } from '@/lib/utils';

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };



================================================================================
// File: components/ui/breadcrumb.tsx
================================================================================

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn('font-normal text-foreground', className)}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:size-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};



================================================================================
// File: components/ui/alert.tsx
================================================================================

import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = 'Alert';

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn('mb-1 font-medium leading-none tracking-tight', className)}
    {...props}
  />
));
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm [&_p]:leading-relaxed', className)}
    {...props}
  />
));
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };



================================================================================
// File: components/ui/sonner.tsx
================================================================================

'use client';

import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton:
            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  );
};

export { Toaster };



================================================================================
// File: components/ui/progress.tsx
================================================================================

'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      'relative h-4 w-full overflow-hidden rounded-full bg-secondary',
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };



================================================================================
// File: components/ui/skeleton.tsx
================================================================================

import { cn } from '@/lib/utils';

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-muted', className)}
      {...props}
    />
  );
}

export { Skeleton };



================================================================================
// File: components/NeonText.module.css
================================================================================

@font-face {
  font-family: 'baeno';
  src: url('/fonts/baeno.otf') format('opentype');
  font-weight: normal;
  font-style: normal;
}

.neonContainer {
  
  font-family: 'baeno', sans-serif;
  font-weight: 200;
  display: flex;
  flex-flow: row;
  justify-content: center;
  color: #d9fdff;
  text-shadow: 0 0 2rem #00f0ff;
  font-size: 4rem;
  letter-spacing: 0.5rem;
  width: 100%;
  padding: 0 0.5rem;
}

@media (min-width: 640px) {
  .neonContainer {
    font-size: 1.5rem;
    letter-spacing: -0.15em;
  }
}

@media (min-width: 768px) {
  .neonContainer {
    font-size: 2rem;
    letter-spacing: -0.2em;
  }
}

@media (min-width: 1024px) {
  .neonContainer {
    font-size: 6rem;
    letter-spacing: 0.05em;
  }
}

.letter {
  display: inline-block;
}

.flicker {
  transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  animation: flicker 2s ease-in-out infinite alternate;
}

@media (min-width: 768px) {
  .flicker {
    transform: translate(-0.2rem, 1rem) rotate(10deg);
  }
}

@keyframes flicker {
  0%, 5% {
    opacity: 1;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
  5.5% {
    opacity: 0;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
  6%, 6.5% {
    opacity: 1;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
  7% {
    opacity: 0;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
  8% {
    opacity: 1;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
  50% {
    opacity: 1;
    transform: translate(-0.1rem, 0.5rem) rotate(13deg);
  }
  100% {
    opacity: 1;
    transform: translate(-0.1rem, 0.5rem) rotate(10deg);
  }
}

@media (min-width: 768px) {
  @keyframes flicker {
    0%, 5% {
      opacity: 1;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
    5.5% {
      opacity: 0;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
    6%, 6.5% {
      opacity: 1;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
    7% {
      opacity: 0;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
    8% {
      opacity: 1;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
    50% {
      opacity: 1;
      transform: translate(-0.2rem, 1rem) rotate(13deg);
    }
    100% {
      opacity: 1;
      transform: translate(-0.2rem, 1rem) rotate(10deg);
    }
  }
} 


================================================================================
// File: components/protected-route.tsx
================================================================================

"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuthContext } from "@/components/auth-provider";

export function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuthContext();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push("/login");
    }
  }, [user, loading, router]);

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Loading...</div>;
  }

  return user ? <>{children}</> : null;
}


================================================================================
// File: components/AnimatedGradientText.tsx
================================================================================

"use client";

import { useEffect, useRef } from 'react';
import { gsap } from 'gsap';

interface AnimatedGradientTextProps {
  text: string;
  className?: string;
}

export function AnimatedGradientText({ text, className = "" }: AnimatedGradientTextProps) {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!containerRef.current) return;

    const mainText = containerRef.current.querySelector(".main-text");
    const layers = {
      topText1: containerRef.current.querySelector(".top-1"),
      topText2: containerRef.current.querySelector(".top-2"),
      topText3: containerRef.current.querySelector(".top-3"),
      bottomText1: containerRef.current.querySelector(".bottom-1"),
      bottomText2: containerRef.current.querySelector(".bottom-2"),
      bottomText3: containerRef.current.querySelector(".bottom-3"),
    };

    const animations = [
      gsap.to(mainText, {duration: 1, scale: 1, repeat: -1, yoyo: true, ease: "power1.inOut", repeatDelay: 1}),
      gsap.to(layers.topText1, { duration: 2, opacity: 0.3, y: -20, repeat: -1, yoyo: true, repeatDelay: 0 }),
      gsap.to(layers.topText2, { duration: 2, opacity: 0.2, y: -40, repeat: -1, yoyo: true, repeatDelay: 0 }),
      gsap.to(layers.topText3, { duration: 2, opacity: 0.1, y: -60, repeat: -1, yoyo: true, repeatDelay: 0 }),
      gsap.to(layers.bottomText1, { duration: 2, opacity: 0.3, y: 20, repeat: -1, yoyo: true, repeatDelay: 0 }),
      gsap.to(layers.bottomText2, { duration: 2, opacity: 0.2, y: 40, repeat: -1, yoyo: true, repeatDelay: 0 }),
      gsap.to(layers.bottomText3, { duration: 2, opacity: 0.1, y: 60, repeat: -1, yoyo: true, repeatDelay: 0 }),
    ];

    return () => {
      animations.forEach(animation => animation.kill());
    };
  }, []);

  return (
    <div ref={containerRef} className={`gradient-text text-2xl md:text-4xl lg:text-5xl xl:text-6xl ${className}`}>
      <span className="main-text font-bold">{text}</span>
      <span className="top-1">{text}</span>
      <span className="top-2">{text}</span>
      <span className="top-3">{text}</span>
      <span className="bottom-1">{text}</span>
      <span className="bottom-2">{text}</span>
      <span className="bottom-3">{text}</span>
    </div>
  );
} 


================================================================================
// File: components/theme-toggle.tsx
================================================================================

"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = React.useState(false);

  // Prevent hydration mismatch by mounting after client-side hydration
  React.useEffect(() => {
    setMounted(true);
  }, []);

  // Show nothing until mounted to prevent hydration mismatch
  if (!mounted) {
    return (
      <Button variant="ghost" size="icon">
        <div className="h-[1.2rem] w-[1.2rem]" />
        <span className="sr-only">Toggle theme</span>
      </Button>
    );
  }

  return (
    <Button 
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")} 
      variant="ghost" 
      size="icon"
    >
      {theme === "dark" ? (
        <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all" />
      ) : (
        <Moon className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all" />
      )}
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}


================================================================================
// File: components/subscription-status.tsx
================================================================================

"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle2, ArrowUpCircle } from "lucide-react";
import Link from "next/link";
import { plans } from "@/lib/config/plans";

interface SubscriptionStatusProps {
  userData: {
    subscriptionStatus: string;
    subscriptionEnd: string | null;
    plan?: string;
    duration?: number;
  } | null;
}

export function SubscriptionStatus({ userData }: SubscriptionStatusProps) {
  if (!userData) return null;

  const isActive = userData.subscriptionStatus === "active";
  const subscriptionEnd = userData.subscriptionEnd 
    ? new Date(userData.subscriptionEnd).toLocaleDateString()
    : null;

  const currentPlan = plans.find(p => p.name === userData.plan);
  const canUpgrade = currentPlan && plans.some(p => 
    p.price > currentPlan.price && p.deviceLimit > currentPlan.deviceLimit
  );

  return (
    <Card>
      <CardHeader>
        <CardTitle>Subscription Status</CardTitle>
        <CardDescription>
          Current plan and subscription information
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isActive ? (
          <>
            <Alert className="mb-4">
              <CheckCircle2 className="h-4 w-4" />
              <AlertTitle>Active Subscription</AlertTitle>
              <AlertDescription>
                Your {userData.duration}-month {userData.plan} subscription is active until {subscriptionEnd}
              </AlertDescription>
            </Alert>
            {canUpgrade && (
              <Button className="w-full" asChild>
                <Link href="/pricing">
                  <ArrowUpCircle className="mr-2 h-4 w-4" />
                  Upgrade Plan
                </Link>
              </Button>
            )}
          </>
        ) : (
          <>
            <Alert variant="destructive" className="mb-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>No Active Subscription</AlertTitle>
              <AlertDescription>
                Subscribe now to access premium content
              </AlertDescription>
            </Alert>
            <Button asChild>
              <Link href="/pricing">View Plans</Link>
            </Button>
          </>
        )}
      </CardContent>
    </Card>
  );
}


================================================================================
// File: components/NeonText.tsx
================================================================================

"use client";

import styles from './NeonText.module.css';

interface NeonTextProps {
  text: string;
  className?: string;
}

export function NeonText({ text, className }: NeonTextProps) {
  return (
    <div className={`${styles.neonContainer} ${className || ''}`}>
      {text.split('').map((char, index) => (
        <span
          key={index}
          className={`${styles.letter} ${index === 1 ? styles.flicker : ''}`}
        >
          {char}
        </span>
      ))}
    </div>
  );
} 


================================================================================
// File: components/dashboard-header.tsx
================================================================================

"use client";

import { useAuthContext } from "@/components/auth-provider";

export function DashboardHeader() {
  const { user } = useAuthContext();

  return (
    <div className="border-b">
      <div className="container flex h-16 items-center">
        <div>
          <h2 className="text-2xl font-bold">Dashboard</h2>
          {user?.email && (
            <p className="text-sm text-muted-foreground">{user.email}</p>
          )}
        </div>
      </div>
    </div>
  );
}


================================================================================
// File: components/StarryBackground.tsx
================================================================================

'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';

function generateStars(count: number, size: number) {
  return Array.from({ length: count }, () => ({
    x: Math.random() * 100,
    y: Math.random() * 100,
    size,
    duration: 50 + Math.random() * 100,
  }));
}

export function StarryBackground() {
  const [stars, setStars] = useState<{
    small: Array<any>;
    medium: Array<any>;
    large: Array<any>;
  } | null>(null);

  useEffect(() => {
    // Generate stars only on the client side
    setStars({
      small: generateStars(700, 1),
      medium: generateStars(200, 2),
      large: generateStars(100, 3),
    });
  }, []);

  if (!stars) {
    return (
      <div className="absolute inset-0 bg-gradient-to-b from-[#1B2735] to-[#090A0F]" />
    );
  }

  return (
    <div className="absolute inset-0 overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-b from-[#1B2735] to-[#090A0F]">
        {Object.entries(stars).map(([key, starArray]) => (
          <div key={key} className="absolute inset-0">
            {starArray.map((star, index) => (
              <motion.div
                key={index}
                className="absolute rounded-full bg-white"
                style={{
                  left: `${star.x}%`,
                  top: `${star.y}%`,
                  width: `${star.size}px`,
                  height: `${star.size}px`,
                }}
                animate={{
                  y: [0, -2000],
                }}
                transition={{
                  duration: star.duration,
                  repeat: Infinity,
                  ease: "linear",
                }}
              />
            ))}
          </div>
        ))}
      </div>
    </div>
  );
} 


================================================================================
// File: components/auth-provider.tsx
================================================================================

"use client";

import { createContext, useContext, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import { auth } from "@/lib/firebase";

const AuthContext = createContext<ReturnType<typeof useAuth>>({
  user: null,
  loading: true,
});

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const authState = useAuth();

  useEffect(() => {
    // Listen for auth state changes
    const unsubscribe = auth.onAuthStateChanged(async (user) => {
      if (user && !user.emailVerified) {
        // If user is not verified and trying to access protected routes
        const protectedPaths = ['/dashboard', '/settings', '/profile'];
        if (protectedPaths.some(path => window.location.pathname.startsWith(path))) {
          await auth.signOut();
          window.location.href = '/auth/verification-sent';
        }
      }
    });

    return () => unsubscribe();
  }, []);

  return <AuthContext.Provider value={authState}>{children}</AuthContext.Provider>;
}

export const useAuthContext = () => useContext(AuthContext);


================================================================================
// File: postcss.config.js
================================================================================

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



================================================================================
// File: firebase.json
================================================================================

{
  "hosting": {
    "public": "out",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  },

  "firestore": {
    "rules": "./firestore.rules",
    "indexes": "./firestore.indexes.json"
  },
  "storage": {
    "rules": "./storage.rules"
  }
}



================================================================================
// File: .eslintrc.json
================================================================================

{
  "extends": "next/core-web-vitals"
}



================================================================================
// File: lib/auth-admin.ts
================================================================================

import { adminDb } from './firebase-admin';

export async function verifyAdminSession(sessionToken: string): Promise<boolean> {
  try {
    const sessionDoc = await adminDb.collection('admin_sessions').doc(sessionToken).get();
    
    if (!sessionDoc.exists) {
      return false;
    }

    const sessionData = sessionDoc.data();
    const expiryTime = sessionData?.expiresAt.toDate();
    
    // Check if session is expired
    if (!expiryTime || expiryTime < new Date()) {
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error verifying admin session:', error);
    return false;
  }
} 


================================================================================
// File: lib/metrics.ts
================================================================================

type MetricType = 'counter' | 'gauge' | 'histogram';

interface MetricValue {
  type: MetricType;
  value: number;
  timestamp: number;
  tags?: Record<string, string>;
}

class Metrics {
  private static metrics: Map<string, MetricValue[]> = new Map();

  private static track(
    name: string, 
    value: number, 
    type: MetricType,
    tags?: Record<string, string>
  ) {
    if (!this.metrics.has(name)) {
      this.metrics.set(name, []);
    }

    const metric: MetricValue = {
      type,
      value,
      timestamp: Date.now(),
      tags
    };

    this.metrics.get(name)?.push(metric);

    // In development, log the metric
    if (process.env.NODE_ENV === 'development') {
      console.log(`[Metric] ${name}: ${value}`, tags);
    }

    // In production, you might want to send this to a metrics service
    // Example: Prometheus, DataDog, or CloudWatch
  }

  static increment(name: string, value: number = 1, tags?: Record<string, string>) {
    this.track(name, value, 'counter', tags);
  }

  static gauge(name: string, value: number, tags?: Record<string, string>) {
    this.track(name, value, 'gauge', tags);
  }

  static histogram(name: string, value: number, tags?: Record<string, string>) {
    this.track(name, value, 'histogram', tags);
  }

  static getMetrics() {
    return Object.fromEntries(this.metrics);
  }

  // Clear metrics (useful for testing)
  static clear() {
    this.metrics.clear();
  }
}

export const metrics = Metrics; 


================================================================================
// File: lib/cron/subscription-reminders.ts
================================================================================

import { NotificationService } from '@/lib/services/notification';

export async function checkExpiringSubscriptions() {
  try {
    await NotificationService.sendExpirationReminders();
  } catch (error) {
    console.error('Error checking expiring subscriptions:', error);
  }
} 


================================================================================
// File: lib/config/plans.ts
================================================================================

export const plans = [
  {
    name: "Mobile",
    price: 89,
    description: "1 Month Package",
    features: [
      "Unlimited Movies & TV Shows",
      "Ad-Free Streaming",
      "Watch on 1 Device (Mobile or Tablet)",
      "480p Streaming",
      "Personalized Watchlist",
    ],
    deviceLimit: 1,
    specialOffers: {
      3: 87,
      6: 87,
    },
    popular: false,
    mobileOnly: true
  },
  {
    name: "Basic",
    price: 149,
    description: "1 Month Package",
    features: [
      "Unlimited Movies & TV Shows",
      "Ad-Free Streaming",
      "Watch on 2 Devices Simultaneously",
      "Full HD Streaming",
      "Personalized Watchlist",
      
    ],
    deviceLimit: 2,
    specialOffers: {
      3: 145,
      6: 145,
    },
    popular: true
  },
  {
    name: "Standard",
    price: 179,
    description: "1 Month Package",
    features: [
      "Unlimited Movies & TV Shows",
      "Ad-Free Streaming",
      "Watch on 3 Devices Simultaneously",
      "Full HD Streaming",
      "Personalized Watchlist",
      "Offline Viewing",
      
    ],
    deviceLimit: 3,
    specialOffers: {
      3: 175,
      6: 175,
    },
    popular: false
  },
  {
    name: "Premium",
    price: 219,
    description: "1 Month Package",
    features: [
      "Unlimited Movies & TV Shows",
      "Ad-Free Streaming",
      "Watch on 4 Devices Simultaneously",
      "Full HD Streaming",
      "Personalized Watchlist",
      "Offline Viewing",
      
    ],
    deviceLimit: 4,
    specialOffers: {
      3: 213,
      6: 214,
    },
    popular: false
  },
]; 


================================================================================
// File: lib/rate-limit.ts
================================================================================

import { adminDb } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';

interface RateLimitConfig {
  limit: number;
  window: string; // e.g., '1m', '1h'
}

interface RateLimitResult {
  success: boolean;
  remaining: number;
  reset: number;
}

class RateLimit {
  private parseWindow(window: string): number {
    const value = parseInt(window);
    const unit = window.slice(-1);
    const multiplier = unit === 'm' ? 60 : unit === 'h' ? 3600 : 1;
    return value * multiplier;
  }

  async check(identifier: string, config: RateLimitConfig): Promise<RateLimitResult> {
    const now = Math.floor(Date.now() / 1000);
    const windowSeconds = this.parseWindow(config.window);
    const rateLimitRef = adminDb.collection('rateLimits').doc(identifier);

    try {
      // Use transaction to ensure atomic operations
      const result = await adminDb.runTransaction(async (transaction) => {
        const doc = await transaction.get(rateLimitRef);
        const data = doc.data();

        // Check if we have existing rate limit data
        if (doc.exists && data) {
          // If the window has expired, reset the count
          if (data.reset <= now) {
            transaction.set(rateLimitRef, {
              count: 1,
              reset: now + windowSeconds
            });
            return {
              success: true,
              remaining: config.limit - 1,
              reset: now + windowSeconds
            };
          }

          // If we're still within the window, increment the count
          const newCount = data.count + 1;
          if (newCount > config.limit) {
            return {
              success: false,
              remaining: 0,
              reset: data.reset
            };
          }

          transaction.update(rateLimitRef, {
            count: newCount
          });

          return {
            success: true,
            remaining: config.limit - newCount,
            reset: data.reset
          };
        }

        // If no existing rate limit, create a new one
        transaction.set(rateLimitRef, {
          count: 1,
          reset: now + windowSeconds
        });

        return {
          success: true,
          remaining: config.limit - 1,
          reset: now + windowSeconds
        };
      });

      return result;
    } catch (error) {
      console.error('Rate limit error:', error);
      // Fail open if Firestore transaction fails
      return {
        success: true,
        remaining: 1,
        reset: now + windowSeconds
      };
    }
  }

  // Cleanup old rate limit documents
  async cleanup() {
    const now = Math.floor(Date.now() / 1000);
    const batch = adminDb.batch();
    const snapshot = await adminDb
      .collection('rateLimits')
      .where('reset', '<=', now)
      .get();

    snapshot.docs.forEach((doc) => {
      batch.delete(doc.ref);
    });

    await batch.commit();
  }
}

export const rateLimit = new RateLimit(); 


================================================================================
// File: lib/firebase.ts
================================================================================

import { initializeApp, getApp, getApps } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

export { app, auth, db, storage };


================================================================================
// File: lib/services/emby.ts
================================================================================

const EMBY_URL = process.env.NEXT_PUBLIC_EMBY_URL || process.env.EMBY_SERVER_URL;
const EMBY_API_KEY = process.env.NEXT_PUBLIC_EMBY_API_KEY || process.env.EMBY_API_KEY;

interface EmbyUser {
  Name: string;
  Id: string;
  Policy?: {
    IsDisabled: boolean;
  };
}

class EmbyError extends Error {
  constructor(message: string, public statusCode?: number) {
    super(message);
    this.name = 'EmbyError';
  }
}

export class EmbyService {
  private static async fetchEmby(endpoint: string, options: RequestInit = {}) {
    if (!EMBY_URL || !EMBY_API_KEY) {
      throw new Error('Missing Emby configuration. Please check NEXT_PUBLIC_EMBY_URL and NEXT_PUBLIC_EMBY_API_KEY environment variables.');
    }

    const url = `${EMBY_URL}/emby${endpoint}`;
    const headers = {
      'X-Emby-Token': EMBY_API_KEY,
      'Content-Type': 'application/json',
      ...options.headers,
    };

    try {
      const response = await fetch(url, { ...options, headers });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new EmbyError(`Emby API error (${response.status}): ${errorText}`, response.status);
      }
      
      return response;
    } catch (error: any) {
      console.error('Emby service error:', error);
      throw error;
    }
  }

  static async createUser(email: string, password: string): Promise<EmbyUser> {
    try {
      // 1. Create the user first
      const createResponse = await this.fetchEmby('/Users/New', {
        method: 'POST',
        body: JSON.stringify({
          Name: email,
        })
      });
      
      const userData = await createResponse.json();
      
      if (!userData || !userData.Id) {
        throw new Error('Invalid response from Emby server');
      }

      // 2. Set the password
      await this.fetchEmby(`/Users/${userData.Id}/Password`, {
        method: 'POST',
        body: JSON.stringify({
          NewPw: password
        })
      });

      // 3. Set the user policy
      await this.fetchEmby(`/Users/${userData.Id}/Policy`, {
        method: 'POST',
        body: JSON.stringify({
          IsAdministrator: false,
          IsHidden: false,
          IsDisabled: true,
          EnableUserPreferenceAccess: true,
          EnableRemoteAccess: true,
          EnableLiveTvAccess: true,
          EnableMediaPlayback: true,
          EnableAudioPlaybackTranscoding: true,
          EnableVideoPlaybackTranscoding: true,
          EnablePlaybackRemuxing: true,
          EnableContentDeletion: false,
          EnableContentDownloading: true,
          EnableSyncTranscoding: true,
          EnableSubtitleDownloading: true,
          EnableSubtitleManagement: true,
          EnablePublicSharing: false,
          RemoteClientBitrateLimit: 0,
          AuthenticationProviderId: "Default",
          EnableAllDevices: true,
          EnableAllChannels: true,
          EnableAllFolders: true,
          SimultaneousStreamLimit: 3
        })
      });

      // 4. Set user configuration
      await this.fetchEmby(`/Users/${userData.Id}/Configuration`, {
        method: 'POST',
        body: JSON.stringify({
          AudioLanguagePreference: "eng",
          PlayDefaultAudioTrack: true,
          SubtitleLanguagePreference: "eng",
          DisplayMissingEpisodes: false,
          SubtitleMode: "Default",
          EnableLocalPassword: true,
          OrderedViews: [],
          LatestItemsExcludes: [],
          MyMediaExcludes: [],
          HidePlayedInLatest: true,
          RememberAudioSelections: true,
          RememberSubtitleSelections: true,
          EnableNextEpisodeAutoPlay: true
        })
      });

      return userData;
    } catch (error: any) {
      console.error('Error creating Emby user:', error);
      throw error;
    }
  }

  static async getUserStatus(userId: string): Promise<boolean> {
    try {
      const response = await this.fetchEmby(`/Users/${userId}`);
      const userData = await response.json();
      return !userData.Policy?.IsDisabled;
    } catch (error) {
      console.error('Error getting user status:', error);
      throw new EmbyError('Failed to get user status');
    }
  }

  static async updateUserPolicy(
    userId: string, 
    isEnabled: boolean, 
    deviceLimit: number = 2,
    maxStreamingBitrate: number = 1080000000 // Default to 1080p
  ) {
    await this.fetchEmby(`/Users/${userId}/Policy`, {
      method: 'POST',
      body: JSON.stringify({
        IsAdministrator: false,
        IsDisabled: !isEnabled,
        EnableRemoteAccess: isEnabled,
        EnableMediaPlayback: isEnabled,
        EnableAudioPlaybackTranscoding: isEnabled,
        EnableVideoPlaybackTranscoding: isEnabled,
        EnablePlaybackRemuxing: isEnabled,
        EnableContentDownloading: isEnabled,
        EnableSyncTranscoding: isEnabled,
        EnableSubtitleDownloading: isEnabled,
        EnableSubtitleManagement: isEnabled,
        EnablePublicSharing: false,
        EnableAllDevices: isEnabled,
        EnableAllChannels: isEnabled,
        EnableAllFolders: isEnabled,
        SimultaneousStreamLimit: isEnabled ? deviceLimit : 0,
        RemoteClientBitrateLimit: maxStreamingBitrate,
        MaxStreamingBitrate: maxStreamingBitrate,
        MaxStaticBitrate: maxStreamingBitrate,
        MaxStaticRemoteQuality: maxStreamingBitrate,
        // Quality settings
        QualityOptions: {
          MaxStreamingBitrate: maxStreamingBitrate,
          MaxStaticBitrate: maxStreamingBitrate,
          MaxStaticRemoteQuality: maxStreamingBitrate,
          EnableAudioPlaybackTranscoding: true,
          EnableVideoPlaybackTranscoding: true,
          EnablePlaybackRemuxing: true
        }
      })
    });
  }

  static async deleteUser(userId: string) {
    await this.fetchEmby(`/Users/${userId}`, {
      method: 'DELETE'
    });
  }

  static async updatePassword(userId: string, newPassword: string) {
    await this.fetchEmby(`/Users/${userId}/Password`, {
      method: 'POST',
      body: JSON.stringify({
        NewPw: newPassword
      })
    });
  }
} 


================================================================================
// File: lib/services/__tests__/notification.test.ts
================================================================================

import { NotificationService, NotificationTypes } from '../notification';
import { EmailService } from '../email';
import { adminDb } from '@/lib/firebase-admin';

// Mock dependencies
jest.mock('../email');
jest.mock('@/lib/firebase-admin', () => ({
  adminDb: {
    collection: jest.fn(() => ({
      doc: jest.fn(() => ({
        get: jest.fn(() => ({
          data: () => ({
            email: 'test@example.com',
            name: 'Test User'
          }),
          exists: true
        }))
      })),
      add: jest.fn(() => Promise.resolve())
    }))
  }
}));

describe('NotificationService', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should send notification successfully', async () => {
    const userId = 'test-user-id';
    const type = NotificationTypes.SUBSCRIPTION_ACTIVATED;
    const data = {
      duration: 1,
      plan: 'basic',
      amount: 10
    };

    await NotificationService.sendNotification(userId, type, data);

    // Verify email was sent
    expect(EmailService.send).toHaveBeenCalled();

    // Verify notification was logged
    expect(adminDb.collection).toHaveBeenCalledWith('notifications');
  });

  it('should throw error when user not found', async () => {
    const userId = 'non-existent-user';
    jest.spyOn(adminDb.collection('users').doc(userId), 'get')
      .mockResolvedValueOnce({
        data: () => null,
        exists: false
      } as any);

    await expect(
      NotificationService.sendNotification(userId, NotificationTypes.SUBSCRIPTION_ACTIVATED, {})
    ).rejects.toThrow('User email not found');
  });
}); 


================================================================================
// File: lib/services/email.ts
================================================================================

import { Resend } from 'resend';
import { EmailTemplate } from '../types/notification';
import { logger } from '@/lib/logger';
import { emailTemplates } from '../templates/email';
import { NotificationType } from '../types/notification';

export class EmailService {
  private static resend = new Resend(process.env.RESEND_API_KEY);
  private static readonly FROM_EMAIL = 'BuzzPlay <noreply@buzzplaymv.com>';
  private static readonly MAX_RETRIES = 3;

  static async send(to: string, template: EmailTemplate) {
    try {
      const response = await this.resend.emails.send({
        from: this.FROM_EMAIL,
        to,
        subject: template.subject,
        text: template.text,
        html: template.html,
        tags: [{ name: 'category', value: 'notification' }]
      });

      logger.info('Email sent successfully', { to, messageId: response.data?.id });
      return response.data;
    } catch (error) {
      logger.error('Failed to send email', { to, error });
      throw error;
    }
  }

  static getSubscriptionTemplate(type: NotificationType, data: any): EmailTemplate {
    return emailTemplates[type](data).email;
  }
} 


================================================================================
// File: lib/services/notification.ts
================================================================================

import { EmailService } from './email';
import { adminDb } from '../firebase-admin';
import { logger } from '../logger';

export const NotificationTypes = {
  SUBSCRIPTION_ACTIVATED: 'subscription_activated',
  SUBSCRIPTION_EXPIRED: 'subscription_expired',
  SUBSCRIPTION_RENEWED: 'subscription_renewed',
} as const;

export type NotificationType = (typeof NotificationTypes)[keyof typeof NotificationTypes];

export class NotificationService {
  static async sendExpirationReminders() {
    const now = new Date();
    const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000);
    
    const expiringUsers = await adminDb
      .collection('users')
      .where('subscriptionStatus', '==', 'active')
      .where('subscriptionEnd', '<=', threeDaysFromNow)
      .where('subscriptionEnd', '>', now)
      .get();

    for (const doc of expiringUsers.docs) {
      const userData = doc.data();
      const subscriptionEnd = userData.subscriptionEnd.toDate();
      const daysLeft = Math.ceil(
        (subscriptionEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)
      );

      await this.sendSubscriptionNotification(doc.id, NotificationTypes.SUBSCRIPTION_EXPIRED, {
        ...userData,
        daysLeft
      });
    }
  }

  static async sendSubscriptionNotification(
    userId: string,
    type: NotificationType,
    data: any
  ) {
    try {
      const userDoc = await adminDb.collection('users').doc(userId).get();
      const userData = userDoc.data();

      if (!userData?.email) {
        throw new Error('User email not found');
      }

      await EmailService.send(userData.email, EmailService.getSubscriptionTemplate(type as any, data));
      
      logger.info('Notification sent successfully', { userId, type });
    } catch (error) {
      logger.error('Failed to send notification', { userId, type, error });
      throw error;
    }
  }

  public static async sendNotification(
    userId: string,
    type: NotificationType,
    data: Record<string, any>
  ) {
    // Implementation here
  }
} 


================================================================================
// File: lib/subscription.ts
================================================================================

import { doc, updateDoc, getDocs, collection, addDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { EmbyService } from '@/lib/services/emby';

export async function handleSubscriptionExpiration(userId: string, embyUserId: string) {
  try {
    // Update Firestore subscription status
    await updateDoc(doc(db, "users", userId), {
      subscriptionStatus: "expired",
      subscriptionEnd: null,
      plan: null,
    });

    // Disable Emby user access
    await EmbyService.updateUserPolicy(embyUserId, false);

    return true;
  } catch (error) {
    console.error("Error handling subscription expiration:", error);
    throw error;
  }
}

export async function activateSubscription(
  userId: string, 
  embyUserId: string, 
  plan: string,
  duration: number,
  amount: number
) {
  try {
    await EmbyService.updateUserPolicy(embyUserId, true);

    // Calculate subscription end date
    const subscriptionEnd = new Date();
    subscriptionEnd.setMonth(subscriptionEnd.getMonth() + duration);

    // Create transaction record
    await addDoc(collection(db, "transactions"), {
      userId: userId,
      plan: plan,
      duration: duration,
      amount: amount,
      date: new Date().toISOString(),
      status: "completed"
    });

    // Update user subscription in Firestore
    await updateDoc(doc(db, "users", userId), {
      subscriptionStatus: "active",
      subscriptionEnd: subscriptionEnd.toISOString(),
      plan: plan,
      duration: duration,
    });

    return true;
  } catch (error) {
    console.error("Error activating subscription:", error);
    throw error;
  }
}

export async function deactivateSubscription(userId: string, embyUserId: string) {
  try {
    // Update Firestore subscription status
    await updateDoc(doc(db, "users", userId), {
      subscriptionStatus: "inactive",
      subscriptionEnd: null,
      plan: null,
    });

    // Disable Emby user access
    await EmbyService.updateUserPolicy(embyUserId, false);


    return true;
  } catch (error) {
    console.error("Error deactivating subscription:", error);
    throw error;
  }
}



export async function syncEmbyWithFirestore() {
  try {
    const usersSnapshot = await getDocs(collection(db, "users"));
    
    const updates = usersSnapshot.docs.map(async (userDoc) => {
      const userData = userDoc.data();
      if (!userData.embyUserId) return;

      const embyStatus = await EmbyService.getUserStatus(userData.embyUserId);
      const firestoreStatus = userData.subscriptionStatus;

      if ((embyStatus && firestoreStatus !== "active") ||
          (!embyStatus && firestoreStatus === "active")) {
        await updateDoc(doc(db, "users", userDoc.id), {
          subscriptionStatus: embyStatus ? "active" : "expired",
          subscriptionEnd: embyStatus ? userData.subscriptionEnd : null,
          plan: embyStatus ? userData.plan : null,
        });
      }
    });

    await Promise.all(updates);
    return true;
  } catch (error) {
    console.error("Error syncing Emby with Firestore:", error);
    throw error;
  }
}

// Helper function to check Emby user status
async function checkEmbyUserStatus(embyUserId: string): Promise<boolean> {
  try {
    const response = await fetch(`${process.env.EMBY_SERVER_URL}/Users/${embyUserId}`, {
      headers: {
        'X-Emby-Token': process.env.EMBY_API_KEY as string,
      },
    });
    
    if (!response.ok) throw new Error('Failed to fetch Emby user');
    
    const userData = await response.json();
    return userData.Policy?.IsDisabled === false;
  } catch (error) {
    console.error("Error checking Emby user status:", error);
    throw error;
  }
}




================================================================================
// File: lib/templates/email.ts
================================================================================

import { NotificationType, NotificationTemplate } from '../types/notification';

export const emailTemplates: Record<NotificationType, (data: any) => NotificationTemplate> = {
  subscription_expired: (data) => ({
    email: {
      subject: 'Your BuzzPlay Subscription Has Expired',
      text: `Your ${data.duration}-month subscription has expired. Please renew to continue accessing our services.`,
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2>Your BuzzPlay Subscription Has Expired</h2>
          <p>Your ${data.duration}-month subscription has expired.</p>
          <p>To continue enjoying unlimited movies and TV shows, please renew your subscription.</p>
          <a href="https://buzzplaymv.com/pricing" style="background-color: #22c55e; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Renew Now
          </a>
        </div>
      `
    },
    telegram: `🔴 Your ${data.duration}-month BuzzPlay subscription has expired. Renew now to continue watching!`
  }),
  
  subscription_expiring_soon: (data) => ({
    email: {
      subject: 'Your BuzzPlay Subscription is Expiring Soon',
      text: `Your ${data.duration}-month subscription will expire in ${data.daysLeft} days. Renew now to avoid service interruption.`,
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2>Your BuzzPlay Subscription is Expiring Soon</h2>
          <p>Your subscription will expire in ${data.daysLeft} days.</p>
          <p>Renew now to ensure uninterrupted access to your favorite content.</p>
          <a href="https://buzzplaymv.com/pricing" style="background-color: #22c55e; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Renew Now
          </a>
        </div>
      `
    },
    telegram: `⚠️ Your BuzzPlay subscription will expire in ${data.daysLeft} days. Renew now to keep watching!`
  }),

  subscription_activated: (data) => ({
    email: {
      subject: 'Welcome to BuzzPlay!',
      text: `Your ${data.duration}-month subscription has been activated. Enjoy watching!`,
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2>Welcome to BuzzPlay!</h2>
          <p>Your ${data.duration}-month subscription has been successfully activated.</p>
          <p>Start watching now and enjoy unlimited access to our content library.</p>
          <a href="https://buzzplaymv.com/" style="background-color: #22c55e; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Start Watching
          </a>
        </div>
      `
    },
    telegram: `✅ Welcome to BuzzPlay! Your ${data.duration}-month subscription is now active. Enjoy watching!`
  }),

  payment_received: (data) => ({
    email: {
      subject: 'Payment Received - BuzzPlay',
      text: `We've received your payment of ${data.amount} for the ${data.duration}-month subscription.`,
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2>Payment Received</h2>
          <p>Thank you for your payment of ${data.amount}.</p>
          <p>Your subscription has been extended by ${data.duration} months.</p>
        </div>
      `
    },
    telegram: `💰 Payment received: ${data.amount} for ${data.duration}-month subscription. Thank you!`
  }),

  payment_failed: (data) => ({
    email: {
      subject: 'Payment Failed - BuzzPlay',
      text: `Your payment of ${data.amount} for the ${data.duration}-month subscription has failed.`,
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2>Payment Failed</h2>
          <p>Your payment of ${data.amount} could not be processed.</p>
          <p>Please try again or contact support if you need assistance.</p>
          <a href="https://buzzplaymv.com/dashboard" style="background-color: #22c55e; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Retry Payment
          </a>
        </div>
      `
    },
    telegram: `❌ Payment failed: ${data.amount} for ${data.duration}-month subscription. Please check your payment method.`
  })
}; 


================================================================================
// File: lib/types/notification.ts
================================================================================

export type NotificationType = 
  | 'subscription_expired'
  | 'subscription_expiring_soon'
  | 'subscription_activated'
  | 'payment_received'
  | 'payment_failed';

export interface EmailTemplate {
  subject: string;
  text: string;
  html: string;
}

export interface NotificationTemplate {
  email: EmailTemplate;
  telegram?: string;
} 


================================================================================
// File: lib/utils.ts
================================================================================

import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================================================
// File: lib/logger.ts
================================================================================

type LogLevel = 'info' | 'warn' | 'error';

interface LogData {
  [key: string]: any;
}

class Logger {
  private static formatMessage(level: LogLevel, message: string, data?: LogData): string {
    const timestamp = new Date().toISOString();
    const dataString = data ? `\n${JSON.stringify(data, null, 2)}` : '';
    return `[${timestamp}] ${level.toUpperCase()}: ${message}${dataString}`;
  }

  static info(message: string, data?: LogData) {
    if (process.env.NODE_ENV === 'development') {
      console.log(this.formatMessage('info', message, data));
    }
    // In production, you might want to use a proper logging service
    // Example: winston, pino, or a cloud logging service
  }

  static warn(message: string, data?: LogData) {
    if (process.env.NODE_ENV === 'development') {
      console.warn(this.formatMessage('warn', message, data));
    }
  }

  static error(message: string, data?: LogData) {
    if (process.env.NODE_ENV === 'development') {
      console.error(this.formatMessage('error', message, data));
    }
  }
}

export const logger = Logger; 


================================================================================
// File: lib/sanitize.ts
================================================================================

import DOMPurify from 'isomorphic-dompurify';

export function sanitizeInput(input: string): string {
  return DOMPurify.sanitize(input, {
    ALLOWED_TAGS: [], // Strip all HTML
    ALLOWED_ATTR: [], // Strip all attributes
  });
} 


================================================================================
// File: lib/firebase-admin.ts
================================================================================

import { initializeApp, getApps, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
import { getAuth } from 'firebase-admin/auth';

if (!getApps().length) {
  initializeApp({
    credential: cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    }),
  });
}

export const adminDb = getFirestore();

export async function setAdminClaim(uid: string) {
  try {
    await getAuth().setCustomUserClaims(uid, { admin: true });
    return true;
  } catch (error) {
    console.error('Error setting admin claim:', error);
    return false;
  }
} 


================================================================================
// File: types/next-auth.d.ts
================================================================================

import NextAuth from "next-auth";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email: string;
    };
  }

  interface User {
    id: string;
    email: string;
  }
}


================================================================================
// File: types/admin.ts
================================================================================

export interface Receipt {
  id: string;
  url: string;
  date: string;
  uploadDate: string;
  amount?: string;
  planName?: string;
  status?: 'pending' | 'approved' | 'rejected';
}

export interface User {
  id: string;
  email: string;
  embyUserId: string;
  subscriptionStatus: string;
  subscriptionEnd: string | null;
  plan: string | null;
  paymentReceipts?: Receipt[];
  isLoading?: boolean;
} 


